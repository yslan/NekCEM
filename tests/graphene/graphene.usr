c-----------------------------------------------------------------------
c
c     Normally-incident plane wave striking a flat sheet of graphene.
c
c-----------------------------------------------------------------------
      subroutine userinc
c-----------------------------------------------------------------------
c     Use this subroutine to compute the incident field.
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'RK5'

      common /userparam/ omega,eps1,eps2,mu1,mu2,sigmagraph,refl,tran
      real omega,eps1,eps2,mu1,mu2
      complex sigmagraph,refl,tran

      common /userincvars/ incindex,ninc
      integer incindex(lxzfl),ninc

      integer i,j,k
      real ky
      real yy,tt,mu,eps,eta,uinc
      complex CI
      parameter (CI = (0.0,1.0))

      tt = rktime
      do i = 1,ninc
         j = incindex(i)
         k = cemface(j)
         yy = ym1(k,1,1,1)
         eps = permittivity(k)
         mu = permeability(k)
         eta = sqrt(mu/eps)
         ky = omega*sqrt(mu*eps)
         uinc = dble(cexp(CI*(-ky*yy-omega*tt)))
         fHN(j,3) = fHN(j,3)+uinc
         fEN(j,1) = fEN(j,1)+eta*uinc
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine userini(tt,myhx,myhy,myhz,myex,myey,myez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'PML'

      common /userparam/ omega,eps1,eps2,mu1,mu2,sigmagraph,refl,tran
      real omega,eps,mu,eps1,eps2,mu1,mu2
      complex sigmagraph,refl,tran

      common /usergraph/ fjn(lxzfl,3,6),kfjn(lxzfl,3,6),resfjn(lxzfl,3
     $     ,6),graphparams(lxzfl,12),graphindex(lxzfl),ngraph
      real fjn,kfjn,resfjn,graphparams
      integer graphindex,ngraph

      integer i,j,k
      real tt,yy
      real myhx(lx1,ly1,lz1,lelt)
      real myhy(lx1,ly1,lz1,lelt)
      real myhz(lx1,ly1,lz1,lelt)
      real myex(lx1,ly1,lz1,lelt)
      real myey(lx1,ly1,lz1,lelt)
      real myez(lx1,ly1,lz1,lelt)

      real a_d,b_d,b_cp1,a_211,a_221,b_11,b_21,b_cp2,a_212,a_222,b_12
     $     ,b_22
      complex z1,cfqn2,cfpn2,cfqn3,cfpn3,enpar,CI
      parameter (CI = (0.0,1.0))

      call usersol(tt,myhx,myhy,myhz,myex,myey,myez)
c     We need to set the extra PML fields too
      do i = 1,npts
         mu = permeability(i)
         eps = permittivity(i)
         pmlbn(i,1) = mu*myhx(i,1,1,1)
         pmlbn(i,2) = mu*myhy(i,1,1,1)
         pmlbn(i,3) = mu*myhz(i,1,1,1)
         pmldn(i,1) = eps*myex(i,1,1,1)
         pmldn(i,2) = eps*myey(i,1,1,1)
         pmldn(i,3) = eps*myez(i,1,1,1)
      enddo

c     We also have to initialize all of the currents
      z1 = sqrt(mu1/eps1)
c     1/2 of the parallel part of the E field at the interface (complex
c     form)
      enpar = 0.5*z1*(1.0-refl)
      do i = 1,ngraph
         j = graphindex(i)

         a_d = graphparams(j,1)
         b_d = graphparams(j,2)
         b_cp1 = graphparams(j,3)
         a_211 = graphparams(j,4)
         a_221 = graphparams(j,5)
         b_11 = graphparams(j,6)
         b_21 = graphparams(j,7)
         b_cp2 = graphparams(j,8)
         a_212 = graphparams(j,9)
         a_222 = graphparams(j,10)
         b_12 = graphparams(j,11)
         b_22 = graphparams(j,12)

         fjn(j,1,2) = dble((b_d/(a_d-CI*omega))*enpar)
         cfqn2 = ((a_211*b_11+CI*omega*b_21)
     $        /(omega**2-a_211+CI*omega*a_221))*enpar
         fjn(j,1,4) = dble(cfqn2)
         fjn(j,1,3) = dble((CI/omega)*(cfqn2+b_11*enpar))
         cfqn3 = ((a_212*b_12+CI*omega*b_22)
     $        /(omega**2-a_212+CI*omega*a_222))*enpar
         fjn(j,1,6) = dble(cfqn3)
         fjn(j,1,5) = dble((CI/omega)*(cfqn3+b_12*enpar))
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usersol(tt,myshx,myshy,myshz,mysex,mysey,mysez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'PML'

      common /userparam/ omega,eps1,eps2,mu1,mu2,sigmagraph,refl,tran
      real omega,eps1,eps2,mu1,mu2
      complex sigmagraph,refl,tran

      real tt
      real myshx(lx1,ly1,lz1,lelt)
      real myshy(lx1,ly1,lz1,lelt)
      real myshz(lx1,ly1,lz1,lelt)
      real mysex(lx1,ly1,lz1,lelt)
      real mysey(lx1,ly1,lz1,lelt)
      real mysez(lx1,ly1,lz1,lelt)

      integer e,i,j,l,lx1_2
      real ky
      real yy,mu,eps,eta,d,pmlfac,pmlsigmamax
      complex CI
      parameter (CI = (0.0,1.0))

      lx1_2 = lx1/2
      do e = 1,nelt
         do j = 1,ly1
            do i = 1,lx1
c     Global number
               l = i+nx1*(j-1)+nx1*ny1*(e-1)
               eps = permittivity(l)
               mu = permeability(l)
               eta = sqrt(mu/eps)
               ky = omega*sqrt(eps*mu)
               yy = ym1(i,j,1,e)
               if (ym1(lx1_2,lx1_2,1,e).gt.0.0) then
                  if (pmltag(e).ne.0) then
                     d = pmlouter(4)-pmlinner(4)
                     pmlsigmamax =
     $                    -(pmlorder+1)*log(pmlreferr)/(2*eta*d)
                     pmlfac = (pmlsigmamax*d/(pmlorder+1))
     $                    *((yy-pmlinner(4))/d)**(pmlorder+1)
                  else
                     pmlfac = 0.0
                  endif
                  myshz(i,j,1,e) =
     $                 dble(refl*cexp(CI*(ky*yy-omega*tt)-eta*pmlfac))
                  mysex(i,j,1,e) = -eta*myshz(i,j,1,e)
               else
                  if (pmltag(e).ne.0) then
                     d = pmlinner(3)-pmlouter(3)
                     pmlsigmamax =
     $                    -(pmlorder+1)*log(pmlreferr)/(2*eta*d)
                     pmlfac = (pmlsigmamax*d/(pmlorder+1))
     $                    *((pmlinner(3)-yy)/d)**(pmlorder+1)
                  else
                     pmlfac = 0.0
                  endif
                  myshz(i,j,1,e) =
     $                 dble(tran*cexp(CI*(-ky*yy-omega*tt)-eta*pmlfac))
                  mysex(i,j,1,e) = eta*myshz(i,j,1,e)
               endif
            enddo
         enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc(tt,srchn,srcen)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      real tt
      real srchn(lpts,3),srcen(lpts,3)

      return
      end
c-----------------------------------------------------------------------
      subroutine userfsrc(tt,srcfhx,srcfhy,srcfhz,srcfex,srcfey,srcfez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'EMWAVE'

      common /usergraph/ fjn(lxzfl,3,6),kfjn(lxzfl,3,6),resfjn(lxzfl,3
     $     ,6),graphparams(lxzfl,12),graphindex(lxzfl),ngraph
      real fjn,kfjn,resfjn,graphparams
      integer graphindex,ngraph

      real tt
      real srcfhx(lxzfl),srcfhy(lxzfl),srcfhz(lxzfl)
      real srcfex(lxzfl),srcfey(lxzfl),srcfez(lxzfl)

      integer i,j

      call cem_te_graphene_current(fjn,kfjn,resfjn,graphparams
     $     ,graphindex,ngraph)

      do i = 1,ngraph
         j = graphindex(i)
         srcfhx(j) = srcfhx(j)-fjn(j,1,1)
         srcfhy(j) = srcfhy(j)-fjn(j,2,1)
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,ielg)
c-----------------------------------------------------------------------
c     Use this routine to set material properties.
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      common /userparam/
     $     omega,               ! frequency of the incident wave
     $     eps1,                ! permittivity in upper region
     $     eps2,                ! permittivity in lower region
     $     mu1,                 ! permeability in upper region
     $     mu2,                 ! permeability in lower region
     $     sigmagraph,          ! complex graphene conductivity
     $     refl,                ! complex reflection coefficient
     $     tran                 ! complex transmission coefficient
      real omega
      real eps1,eps2,mu1,mu2
      complex sigmagraph,csigma_d,csigma_cp1,csigma_cp2
      complex refl,tran,z1,z2,CI
      parameter (CI = (0.0,1.0))

      common /usergraph/ fjn(lxzfl,3,6),kfjn(lxzfl,3,6),resfjn(lxzfl,3
     $     ,6),graphparams(lxzfl,12),graphindex(lxzfl),ngraph
      real fjn,kfjn,resfjn,graphparams
      integer graphindex,ngraph

      common /userincvars/ incindex,ninc
      integer incindex(lxzfl),ninc

c     These don't do anything! This is a temporary measure until
c
c     https://github.com/NekCEM/NekCEM/issues/12
c
c     is resolved.
      integer ix,iy,iz,ielg

      logical markinc,mark2d
      integer e,f,i,j,k,nx1_2
      real a_d,b_d,b_cp1,a_211,a_221,b_11,b_21,b_cp2,a_212,a_222,b_12
     $     ,b_22

      omega = 5.0
      eps1 = 1.0
      eps2 = 1.0
      mu1 = 1.0
      mu2 = 1.0

c     Set the parameters for the graphene
      a_d = 0.000e+00
      b_d = 1.499e+00
      b_cp1 = -2.599e-03
      a_211 = 4.632e+05
      a_221 = 1.090e+03
      b_11 = -1.391e+00
      b_21 = -3.125e+02
      b_cp2 = -1.049e-03
      a_212 = 4.271e+05
      a_222 = 2.742e+02
      b_12 = -7.769e-02
      b_22 = 4.268e+02

      csigma_d = b_d/(a_d-CI*omega)
      csigma_cp1 = (CI/omega)*((a_211*b_11+CI*omega*b_21)
     $     /(omega**2-a_211+CI*omega*a_221)+b_11)-b_cp1
      csigma_cp2 = (CI/omega)*((a_212*b_12+CI*omega*b_22)
     $     /(omega**2-a_212+CI*omega*a_222)+b_12)-b_cp2
      sigmagraph = csigma_d+csigma_cp1+csigma_cp2

      z1 = sqrt(mu1/eps1)
      z2 = sqrt(mu2/eps2)
      refl = (z1-z2+sigmagraph*z1*z2)/(z1+z2+sigmagraph*z1*z2)
      tran = 2*z1/(z1+z2+sigmagraph*z1*z2)

      nx1_2 = nx1/2
c     Set the permittivity and permeability
      do e = 1,nelt
         do i = 1,nxyz
            j = i+nx1*ny1*nz1*(e-1)
            if (ym1(nx1_2,nx1_2,nx1_2,e).gt.0) then
c     Upper region
               permittivity(j) = eps1
               permeability(j) = mu1
            else
c     Lower region
               permittivity(j) = eps2
               permeability(j) = mu2
            endif
         enddo
      enddo

      ninc = 0
      ngraph = 0
      do e = 1,nelt
c     Make an index of where the incident field needs to be added
         if (ym1(nx1_2,nx1_2,1,e).gt.0.0) then
            markinc = .true.
            do f = 1,nfaces
               do i = 1,nxzf
c     j is the global face number
                  j = (e-1)*nxzf*nfaces+nxzf*(f-1)+i
c     k is the volume global number associated with face j.
                  k = cemface(j)
                  if (abs(ym1(k,1,1,1)).gt.1e-8) then
                     markinc = .false.
                     exit
                  endif
               enddo
               if (markinc) then
                  do i = 1,nxzf
                     ninc = ninc+1
                     j = (e-1)*nxzf*nfaces+nxzf*(f-1)+i
                     incindex(ninc) = j
                  enddo
               endif
            enddo
         endif
c     Now mark the faces where there are 2d materials
         do f = 1,nfaces
            mark2d = .true.
            do i = 1,nxzf
               j = (e-1)*nxzf*nfaces+nxzf*(f-1)+i
               k = cemface(j)
               if (abs(ym1(k,1,1,1)).gt.1e-8) then
                  mark2d = .false.
               endif
            enddo
            if (mark2d) then
               do i = 1,nxzf
                  ngraph = ngraph+1
                  j = (e-1)*nxzf*nfaces+nxzf*(f-1)+i
                  graphindex(ngraph) = j
                  graphparams(j,1) = a_d
                  graphparams(j,2) = b_d
                  graphparams(j,3) = b_cp1
                  graphparams(j,4) = a_211
                  graphparams(j,5) = a_221
                  graphparams(j,6) = b_11
                  graphparams(j,7) = b_21
                  graphparams(j,8) = b_cp2
                  graphparams(j,9) = a_212
                  graphparams(j,10) = a_222
                  graphparams(j,11) = b_12
                  graphparams(j,12) = b_22
               enddo
            endif
         enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
c-----------------------------------------------------------------------
      implicit none

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
c-----------------------------------------------------------------------
c     Use this subroutine to set the dimensions of the domain.
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      integer e,f,i,j,n,nxy2
      real glmin,glmax
      real sx,sy,sz,xmid,ymid,zmid
      real xmin,ymin,zmin,xmax,ymax,zmax

      n = nx1*ny1*nz1*nelv

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)

      sx = 5.0
      sy = 10.0
      if (if3d) sz = 5.0

      if (if3d) then
         do i = 1,n
            xm1(i,1,1,1) = sx*(xm1(i,1,1,1)-xmin)/(xmax-xmin)-(sx/2.0)
            ym1(i,1,1,1) = sy*(ym1(i,1,1,1)-ymin)/(ymax-ymin)-(sy/2.0)
            zm1(i,1,1,1) = sz*(zm1(i,1,1,1)-zmin)/(zmax-zmin)-(sz/2.0)
         enddo
      else
         do i = 1,n
            xm1(i,1,1,1) = sx*(xm1(i,1,1,1)-xmin)/(xmax-xmin)-(sx/2.0)
            ym1(i,1,1,1) = sy*(ym1(i,1,1,1)-ymin)/(ymax-ymin)-(sy/2.0)
         enddo
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      common /ccpu/  cpu_t,cpu_dtime,cpu_chk
      real cpu_t,cpu_dtime,cpu_chk

      integer i
      real l2(6),linf(6)
      real l2tol(6),linftol(6)
      real cpu_p_t

      l2tol(1) = 0.0
      l2tol(2) = 0.0
      l2tol(3) = 1e-7
      l2tol(4) = 1e-7
      l2tol(5) = 1e-14
      l2tol(6) = 0.0

      linftol(1) = 0.0
      linftol(2) = 0.0
      linftol(3) = 5e-6
      linftol(4) = 5e-6
      linftol(5) = 5e-13
      linftol(6) = 0.0

      if (istep.le.10.or.mod(istep,iocomm).eq.0) then
         call usersol
     $     (time,shn(1,1),shn(1,2),shn(1,3),sen(1,1),sen(1,2),sen(1,3))

         call cem_error(hn(1,1),shn(1,1),errhn(1,1),npts,l2(1),linf(1))
         call cem_error(hn(1,2),shn(1,2),errhn(1,2),npts,l2(2),linf(2))
         call cem_error(hn(1,3),shn(1,3),errhn(1,3),npts,l2(3),linf(3))
         call cem_error(en(1,1),sen(1,1),erren(1,1),npts,l2(4),linf(4))
         call cem_error(en(1,2),sen(1,2),erren(1,2),npts,l2(5),linf(5))
         call cem_error(en(1,3),sen(1,3),erren(1,3),npts,l2(6),linf(6))

         call userprint(istep,time,dt,l2,linf,cpu_t,cpu_p_t)

c$$$         do i = 1,6
c$$$            if (l2(i).gt.l2tol(i)) stop 1
c$$$            if (linf(i).gt.linftol(i)) stop 1
c$$$         enddo
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userprint(istep,tt,dt,l2,linf,t1,t2)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      integer istep
      real tt,dt,t1,t2
      real l2(6),linf(6)

      integer k

      if (nid.eq.0) then
         write(6,101) istep,nelt,nx1-1,npts,tt,dt,(l2(k),k=1,6),t1,t2
         write(6,102) istep,nelt,nx1-1,npts,tt,dt,(linf(k),k=1,6),t1,t2
      endif

 101  format(/,i10,i6,i4,i9,1p9e10.3,e9.2,'CPU: L2')
 102  format(  i10,i6,i4,i9,1p9e10.3,e9.2,'CPU: Linf')

      return
      end
c-----------------------------------------------------------------------
