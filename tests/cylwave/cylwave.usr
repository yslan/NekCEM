c-----------------------------------------------------------------------
c
c     Cylindrical waveguide.
c
c-----------------------------------------------------------------------
      subroutine userinc(tt,incfhx,incfhy,incfhz,incfex,incfey,incfez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      real tt
      real incfhx(lxzfl),incfhy(lxzfl),incfhz(lxzfl)
      real incfex(lxzfl),incfey(lxzfl),incfez(lxzfl)

      return
      end
c-----------------------------------------------------------------------
      subroutine usersol(tt,solhx,solhy,solhz,solex,soley,solez)
c-----------------------------------------------------------------------
c     See David de Wolf, Essentials of Electromagnetics for Engineering,
c     Cambridge University Press, 2001 Section 19.7. This is the TM wave
c     case.
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      real tt
      real solhx(lpts),solhy(lpts),solhz(lpts)
      real solex(lpts),soley(lpts),solez(lpts)

      real cspeed
      parameter (cspeed = 1.0)
      real permit_0
      parameter (permit_0 = 1.0)
      real geom_xyradius,glmax,glmin
      real bssljrt,bsslj,bssljp
      real xmin,ymin,zmin,xmax,ymax,zmax
      save xmin,ymin,zmin,xmax,ymax,zmax
      real xx,yy,zz
      real zsize
      integer i,n

c     Mode selection
      integer m,rootidx
      real tmscale
      parameter (m = 0)         ! Index of the Bessel function
      parameter (rootidx = 1)   ! Index of Bessel J_nu root
      parameter (tmscale = 1.0) ! Scale factor of TM component

c     Extent of domain
      real radius
      save radius

c     Local coordinates
      real myx,myy,myz
      real rho,phi

c     Following variables named as in the reference.
      real kz,bigk,omega
      real erho,ephi,ezz
      real hrho,hphi,hzz

c     Helper variables
      integer zwaves
      complex zfactor,tfactor,allfac

c     Helper for initialize-once variables
      logical icalld
      data icalld /.false./
      save icalld

      complex iunit
      parameter (iunit = (0,1))

      n = nx1*ny1*nz1*nelt

c     Compute radius
      if (.not.icalld) then
         radius = geom_xyradius()
         xmax = glmax(xm1,n)
         ymax = glmax(ym1,n)
         zmax = glmax(zm1,n)
         xmin = glmin(xm1,n)
         ymin = glmin(ym1,n)
         zmin = glmin(zm1,n)
         icalld = .true.

         do i = 1,nx1*ny1*nz1*nelt
            xx = xm1(i,1,1,1)
            yy = ym1(i,1,1,1)
            zz = zm1(i,1,1,1)
            rho = sqrt(xx**2+yy**2)
            if (rho.eq.0) then
               if (nid.eq.0)
     $              write(6,*) 'change N: radius zero/solution infinity'
               call exitt
c     The analyic solution has a discontinuity at zero, so there really
c     is no "correct" value there. (Consider approach to zero along X-
c     and Y-axis.)  The best, but still fishy, thing to do is to put all
c     fields to zero.

c     Alternate is to set as below
               ezz = 0.0
               erho = 0.0
               ephi = 0.0
               hrho = 0.0
               hphi = 0.0
            endif
         enddo
      endif

      zsize = zmax-zmin
      zwaves = 1.0
      if (abs(zsize).le.1e-20) then
         kz = 0.0
      else
         kz = 2*pi*zwaves/zsize
      endif

      do i = 1,nx1*ny1*nz1*nelt
         myx = xm1(i,1,1,1)
         myy = ym1(i,1,1,1)
         myz = zm1(i,1,1,1)

c     Find local coordinates
         rho = sqrt(myx**2+myy**2)
         phi = atan2(myy,myx)

c     Compute solution
         bigk = bssljrt(m,rootidx)/radius
         omega = sqrt(kz**2+bigk**2)*cspeed

         zfactor = cexp((0,-1)*kz*myz)
         tfactor = cexp((0,1)*omega*tt)
         allfac = tmscale*zfactor*tfactor

         if (rho.ne.0) then
            ezz = real(allfac*bsslj(m,bigk*rho)*cos(m*phi))
            erho = real(allfac*(-iunit)*kz/bigk*bssljp(m,bigk*rho)
     $           *cos(m*phi))
            ephi = real(allfac*iunit*m*kz/bigk**2/rho
     $           *bsslj(m,bigk*rho)*sin(m*phi))
            hrho = real(allfac*(-iunit)*m*omega*permit_0/bigk**2/rho
     $           *bsslj(m,bigk*rho)*sin(m*phi))
            hphi = real(allfac*(-iunit)*omega*permit_0/bigk
     $           *bssljp(m,bigk*rho)*cos(m*phi))
            hzz = 0.0           ! TM case

            solhx(i) = cos(phi)*hrho-sin(phi)*hphi
            solhy(i) = sin(phi)*hrho+cos(phi)*hphi
            solhz(i) = hzz
            solex(i) = cos(phi)*erho-sin(phi)*ephi
            soley(i) = sin(phi)*erho+cos(phi)*ephi
            solez(i) = ezz
         endif
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      real xsize,ysize,zsize
      real xmin,xmax,ymin,ymax,zmin,zmax
      real radius,rn,rr
      real e1
      real geom_xyradius
      integer i,ie,n

      n = 8*lelt

      radius = geom_xyradius()
      radius = int(10*radius+0.1)/10.0
      e1 = radius*radius-1e-4

      do ie=1,nelt
         do i=1,8
            rr = xc(i,ie)*xc(i,ie)+yc(i,ie)*yc(i,ie)
            if (rr.gt.e1) then
               rr = sqrt(rr)
               rn = radius/rr
               xc(i,ie) = rn*xc(i,ie)
               yc(i,ie) = rn*yc(i,ie)
            endif
         enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      integer i,n
      real glmax,glmin
      real xmax,ymax,zmax,xmin,ymin,zmin
      real sz

      n = nx1*ny1*nz1*nelv

      xmax = glmax(xm1,n)
      ymax = glmax(ym1,n)
      zmax = glmax(zm1,n)
      xmin = glmin(xm1,n)
      ymin = glmin(ym1,n)
      zmin = glmin(zm1,n)

      sz = 2*pi*xmax/(zmax-zmin)

      if (if3d) then
         do i = 1,n
            zm1(i,1,1,1) = sz*(zm1(i,1,1,1)-zmin)
         enddo
      endif

      xmax = glmax(xm1,n)
      ymax = glmax(ym1,n)
      zmax = glmax(zm1,n)
      xmin = glmin(xm1,n)
      ymin = glmin(ym1,n)
      zmin = glmin(zm1,n)

      return
      end
c-----------------------------------------------------------------------
      subroutine userini(tt,hx,hy,hz,ex,ey,ez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'

      real tt
      real hx(lpts),hy(lpts),hz(lpts)
      real ex(lpts),ey(lpts),ez(lpts)

      call usersol(tt,hx,hy,hz,ex,ey,ez)
      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc(tt,srchx,srchy,srchz,srcex,srcey,srcez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      real tt
      real srchx(lpts),srchy(lpts),srchz(lpts)
      real srcex(lpts),srcey(lpts),srcez(lpts)

      return
      end
c-----------------------------------------------------------------------
      subroutine userfsrc(tt,srcfhx,srcfhy,srcfhz,srcfex,srcfey,srcfez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      real tt
      real srcfhx(lxzfl),srcfhy(lxzfl),srcfhz(lxzfl)
      real srcfex(lxzfl),srcfey(lxzfl),srcfez(lxzfl)

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,ieg)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

c     These don't do anything! This is a temporary measure until
c
c     https://github.com/NekCEM/NekCEM/issues/12
c
c     is resolved.
      integer ix,iy,iz,ieg

      integer i

      do i = 1,npts
         permittivity(i) = 1.0
         permeability(i) = 1.0
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      common /ccpu/  cpu_t,cpu_dtime,cpu_chk
      real cpu_t,cpu_dtime,cpu_chk

      integer i
      real l2(6),linf(6)
      real l2tol(6),linftol(6)
      real cpu_p_t

      l2tol(1) = 5e-9
      l2tol(2) = 5e-9
      l2tol(3) = 5e-9
      l2tol(4) = 5e-9
      l2tol(5) = 5e-9
      l2tol(6) = 5e-9

      linftol(1) = 5e-8
      linftol(2) = 5e-8
      linftol(3) = 5e-8
      linftol(4) = 5e-8
      linftol(5) = 5e-8
      linftol(6) = 5e-8

      if (istep.le.10.or.mod(istep,iocomm).eq.0) then
         call usersol
     $     (time,shn(1,1),shn(1,2),shn(1,3),sen(1,1),sen(1,2),sen(1,3))

         call cem_error(hn(1,1),shn(1,1),errhn(1,1),npts,l2(1),linf(1))
         call cem_error(hn(1,2),shn(1,2),errhn(1,2),npts,l2(2),linf(2))
         call cem_error(hn(1,3),shn(1,3),errhn(1,3),npts,l2(3),linf(3))
         call cem_error(en(1,1),sen(1,1),erren(1,1),npts,l2(4),linf(4))
         call cem_error(en(1,2),sen(1,2),erren(1,2),npts,l2(5),linf(5))
         call cem_error(en(1,3),sen(1,3),erren(1,3),npts,l2(6),linf(6))

         call userprint(istep,time,dt,l2,linf,cpu_t,cpu_p_t)

         do i = 1,6
            if (l2(i).gt.l2tol(i)) stop 1
            if (linf(i).gt.linftol(i)) stop 1
         enddo
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userprint(istep,tt,dt,l2,linf,t1,t2)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      integer istep
      real tt,dt,t1,t2
      real l2(6),linf(6)

      integer k

      if (nid.eq.0) then
         write(6,101) istep,nelt,nx1-1,npts,tt,dt,(l2(k),k=1,6),t1,t2
         write(6,102) istep,nelt,nx1-1,npts,tt,dt,(linf(k),k=1,6),t1,t2
      endif

 101  format(/,i10,i6,i4,i9,1p9e10.3,e9.2,' CPU: L2')
 102  format(  i10,i6,i4,i9,1p9e10.3,e9.2,' CPU: Linf')

      return
      end
c-----------------------------------------------------------------------
