c-----------------------------------------------------------------------
c
c     Normally-incident plane wave striking a dielectric interface.
c
c-----------------------------------------------------------------------
      subroutine userinc(tt,incfhx,incfhy,incfhz,incfex,incfey,incfez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'RK5'

      common /userparam/ omega,eps1,eps2,mu1,mu2,reflte,trante,refltm
     $     ,trantm
      real omega,eps1,eps2,mu1,mu2,reflte,trante,refltm,trantm

      common /userincvars/ incindex,ninc
      integer incindex(lxzfl),ninc

      real tt
      real incfhx(lxzfl),incfhy(lxzfl),incfhz(lxzfl)
      real incfex(lxzfl),incfey(lxzfl),incfez(lxzfl)

      integer i,j,k
      real ky
      real yy,mu,eps,eta,uinc

      do i = 1,ninc
         j = incindex(i)
         k = cemface(j)
         yy = ym1(k,1,1,1)
         eps = permittivity(k)
         mu = permeability(k)
         eta = sqrt(mu/eps)
         ky = omega*sqrt(mu*eps)
         uinc = cos(-ky*yy-omega*tt)
         incfhz(j) = incfhz(j)+uinc
         incfex(j) = incfex(j)+eta*uinc
         incfez(j) = incfez(j)+uinc
         incfhx(j) = incfhx(j)-uinc/eta
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine userini(tt,hx,hy,hz,ex,ey,ez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'PML'

      real tt
      real hx(lpts),hy(lpts),hz(lpts)
      real ex(lpts),ey(lpts),ez(lpts)

      integer i
      real mu,eps

      call usersol(tt,hx,hy,hz,ex,ey,ez)
c     We need to set the extra PML fields too
      do i = 1,npts
         mu = permeability(i)
         eps = permittivity(i)
         pmlbn(i,1) = mu*hx(i)
         pmlbn(i,2) = mu*hy(i)
         pmlbn(i,3) = mu*hz(i)
         pmldn(i,1) = eps*ex(i)
         pmldn(i,2) = eps*ey(i)
         pmldn(i,3) = eps*ez(i)
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usersol(tt,solhx,solhy,solhz,solex,soley,solez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'PML'

      common /userparam/ omega,eps1,eps2,mu1,mu2,reflte,trante,refltm
     $     ,trantm
      real omega,eps1,eps2,mu1,mu2,reflte,trante,refltm,trantm

      real tt
      real solhx(lpts),solhy(lpts),solhz(lpts)
      real solex(lpts),soley(lpts),solez(lpts)

      integer e,i,j,k,l,lx1_2
      real ky,uu
      real yy,mu,eps,eta,d,pmlfac,pmlsigmamax

      lx1_2 = lx1/2
      do e = 1,nelt
         do k = 1,lz1
            do j = 1,ly1
               do i = 1,lx1
c     Global number
                  l = i+nx1*(j-1)+nx1*ny1*(k-1)+nx1*ny1*nz1*(e-1)
                  eps = permittivity(l)
                  mu = permeability(l)
                  eta = sqrt(mu/eps)
                  ky = omega*sqrt(eps*mu)
                  yy = ym1(i,j,k,e)
                  if (ym1(lx1_2,lx1_2,lx1_2,e).gt.0.0) then
                     if (pmltag(e).ne.0) then
                        d = pmlouter(4)-pmlinner(4)
                        pmlsigmamax =
     $                       -(pmlorder+1)*log(pmlreferr)/(2*eta*d)
                        pmlfac = (pmlsigmamax*d/(pmlorder+1))
     $                       *((yy-pmlinner(4))/d)**(pmlorder+1)
                     else
                        pmlfac = 0.0
                     endif
                     uu = exp(-eta*pmlfac)*cos(ky*yy-omega*tt)
                     solhz(l) = reflte*uu
                     solex(l) = -eta*reflte*uu
                     solez(l) = refltm*uu
                     solhx(l) = refltm*uu/eta
                  else
                     if (pmltag(e).ne.0) then
                        d = pmlinner(3)-pmlouter(3)
                        pmlsigmamax =
     $                       -(pmlorder+1)*log(pmlreferr)/(2*eta*d)
                        pmlfac = (pmlsigmamax*d/(pmlorder+1))
     $                       *((pmlinner(3)-yy)/d)**(pmlorder+1)
                     else
                        pmlfac = 0.0
                     endif
                     uu = exp(-eta*pmlfac)*cos(-ky*yy-omega*tt)
                     solhz(l) = trante*uu
                     solex(l) = eta*trante*uu
                     solez(l) = trantm*uu
                     solhx(l) = -trantm*uu/eta
                  endif
               enddo
            enddo
         enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc(tt,srchx,srchy,srchz,srcex,srcey,srcez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      real tt
      real srchx(lpts),srchy(lpts),srchz(lpts)
      real srcex(lpts),srcey(lpts),srcez(lpts)

      return
      end
c-----------------------------------------------------------------------
      subroutine userfsrc(tt,srcfhx,srcfhy,srcfhz,srcfex,srcfey,srcfez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      real tt
      real srcfhx(lxzfl),srcfhy(lxzfl),srcfhz(lxzfl)
      real srcfex(lxzfl),srcfey(lxzfl),srcfez(lxzfl)

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,iel)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      common /userparam/
     $     omega,               ! frequency of the incident wave
     $     eps1,                ! permittivity in upper region
     $     eps2,                ! permittivity in lower region
     $     mu1,                 ! permeability in upper region
     $     mu2,                 ! permeability in lower region
     $     reflte,              ! TE reflection coefficient
     $     trante,              ! TE transmission coefficient
     $     refltm,              ! TM reflection coefficient
     $     trantm               ! TM transmission coefficient
      real omega,eps1,eps2,mu1,mu2,reflte,trante,refltm,trantm

      common /userincvars/ incindex,ninc
      integer incindex(lxzfl),ninc

      common /userlogic/ twomat
      logical twomat

c     These don't do anything! This is a temporary measure until
c
c     https://github.com/NekCEM/NekCEM/issues/12
c
c     is resolved.
      integer ix,iy,iz,iel

      logical markinc
      integer e,f,i,j,k,nx1_2
      real z1,z2

c     Do some evil hijacking of .rea parameters to determine whether
c     there should be a material interface. Need to work out a better
c     way to do this.
      if (param(70).eq.1) then
         twomat = .true.
      else
         twomat = .false.
      endif

      omega = 2.0
      eps1 = 1.0
      if (twomat) then
         eps2 = 2.0
      else
         eps2 = 1.0
      endif
      mu1 = 1.0
      mu2 = 1.0

      z1 = sqrt(mu1/eps1)
      z2 = sqrt(mu2/eps2)
      reflte = (z1-z2)/(z1+z2)
      trante = 2*z1/(z1+z2)
      refltm = (z2-z1)/(z1+z2)
      trantm = 2*z2/(z1+z2)

      nx1_2 = nx1/2
c     Set the permittivity and permeability
      do e = 1,nelt
         do i = 1,nxyz
            j = i+nx1*ny1*nz1*(e-1)
            if (ym1(nx1_2,nx1_2,nx1_2,e).gt.0) then
c     Upper region
               permittivity(j) = eps1
               permeability(j) = mu1
            else
c     Lower region
               permittivity(j) = eps2
               permeability(j) = mu2
            endif
         enddo
      enddo

c     Build an index of where the incident field needs to be added
      ninc = 0
      do e = 1,nelt
         if (ym1(nx1_2,nx1_2,nx1_2,e).gt.0.0) then
            markinc = .true.
            do f = 1,nfaces
               do i = 1,nxzf
c     j is the global face number
                  j = (e-1)*nxzf*nfaces+nxzf*(f-1)+i
c     k is the volume global number associated with face j.
                  k = cemface(j)
                  if (abs(ym1(k,1,1,1)).gt.1e-8) then
                     markinc = .false.
                     exit
                  endif
               enddo
               if (markinc) then
                  do i = 1,nxzf
                     ninc = ninc+1
                     j = (e-1)*nxzf*nfaces+nxzf*(f-1)+i
                     incindex(ninc) = j
                  enddo
               endif
            enddo
         endif
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
c-----------------------------------------------------------------------
      implicit none

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
c-----------------------------------------------------------------------
c     Use this subroutine to set the dimensions of the domain.
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      integer e,f,i,j,n,nxy2
      real glmin,glmax
      real sx,sy,sz,xmid,ymid,zmid
      real xmin,ymin,zmin,xmax,ymax,zmax

      n = nx1*ny1*nz1*nelv

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)

      sx = 5.0
      sy = 10.0
      if (if3d) sz = 5.0

      do i = 1,n
         xm1(i,1,1,1) = sx*(xm1(i,1,1,1)-xmin)/(xmax-xmin)-(sx/2.0)
         ym1(i,1,1,1) = sy*(ym1(i,1,1,1)-ymin)/(ymax-ymin)-(sy/2.0)
         if (if3d) then
            zm1(i,1,1,1) = sz*(zm1(i,1,1,1)-zmin)/(zmax-zmin)-(sz/2.0)
         endif
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      common /ccpu/  cpu_t,cpu_dtime,cpu_chk
      real cpu_t,cpu_dtime,cpu_chk

      common /userlogic/ twomat
      logical twomat

      integer i
      real l2(6),linf(6)
      real l2tol(6),linftol(6)
      real cpu_p_t

      if (twomat) then
         l2tol(1) = 5e-4
         l2tol(2) = 5e-14
         l2tol(3) = 5e-4
         l2tol(4) = 5e-4
         l2tol(5) = 5e-14
         l2tol(6) = 5e-4

         linftol(1) = 5e-3
         linftol(2) = 1e-12
         linftol(3) = 5e-3
         linftol(4) = 5e-3
         linftol(5) = 1e-12
         linftol(6) = 5e-3
      else
         l2tol(1) = 5e-4
         l2tol(2) = 5e-14
         l2tol(3) = 5e-4
         l2tol(4) = 5e-4
         l2tol(5) = 5e-14
         l2tol(6) = 5e-4

         linftol(1) = 5e-3
         linftol(2) = 5e-12
         linftol(3) = 5e-3
         linftol(4) = 5e-3
         linftol(5) = 5e-12
         linftol(6) = 5e-3
      endif

      if (istep.le.10.or.mod(istep,iocomm).eq.0) then
         call usersol
     $     (time,shn(1,1),shn(1,2),shn(1,3),sen(1,1),sen(1,2),sen(1,3))

         call cem_error(hn(1,1),shn(1,1),errhn(1,1),npts,l2(1),linf(1))
         call cem_error(hn(1,2),shn(1,2),errhn(1,2),npts,l2(2),linf(2))
         call cem_error(hn(1,3),shn(1,3),errhn(1,3),npts,l2(3),linf(3))
         call cem_error(en(1,1),sen(1,1),erren(1,1),npts,l2(4),linf(4))
         call cem_error(en(1,2),sen(1,2),erren(1,2),npts,l2(5),linf(5))
         call cem_error(en(1,3),sen(1,3),erren(1,3),npts,l2(6),linf(6))

         call userprint(istep,time,dt,l2,linf,cpu_t,cpu_p_t)

         do i = 1,6
            if (l2(i).gt.l2tol(i)) stop 1
            if (linf(i).gt.linftol(i)) stop 1
         enddo
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userprint(istep,tt,dt,l2,linf,t1,t2)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      integer istep
      real tt,dt,t1,t2
      real l2(6),linf(6)

      integer k

      if (nid.eq.0) then
         write(6,101) istep,nelt,nx1-1,npts,tt,dt,(l2(k),k=1,6),t1,t2
         write(6,102) istep,nelt,nx1-1,npts,tt,dt,(linf(k),k=1,6),t1,t2
      endif

 101  format(/,i10,i6,i4,i9,1p9e10.3,e9.2,' CPU: L2')
 102  format(  i10,i6,i4,i9,1p9e10.3,e9.2,' CPU: Linf')

      return
      end
c-----------------------------------------------------------------------
