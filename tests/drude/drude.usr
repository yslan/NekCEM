c-----------------------------------------------------------------------
c
c     Normally-incident plane wave striking a dielectric Drude-material
c     interface.
c
c-----------------------------------------------------------------------
      subroutine userinc(tt,incfhx,incfhy,incfhz,incfex,incfey,incfez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      common /userparam/ omega,eps1,eps2,mu1,mu2,eta1,eta2,k1,k2,
     $     mydrudea,mydrudeb,refl,tran
      real omega,eps1,mu1,mu2,eta1,k1,mydrudea,mydrudeb
      complex eps2,eta2,k2,refl,tran

      common /userincvars/ incindex,ninc
      integer incindex(lxzfl),ninc

      real tt
      real incfhx(lxzfl),incfhy(lxzfl),incfhz(lxzfl)
      real incfex(lxzfl),incfey(lxzfl),incfez(lxzfl)

      integer i,j,k
      real ky
      real yy,mu,eps,eta,uinc

!$ACC DATA PRESENT(incfhz,incfex,cemface,ym1,incindex)
!$ACC PARALLEL LOOP
      do i = 1,ninc
         j = incindex(i)
         k = cemface(j)
         yy = ym1(k,1,1,1)
         uinc = cos(-k1*yy-omega*tt)
         incfhz(j) = incfhz(j)+uinc
         incfex(j) = incfex(j)+eta1*uinc
      enddo
!$ACC END DATA

      return
      end
c-----------------------------------------------------------------------
      subroutine userini(tt,hx,hy,hz,ex,ey,ez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'PML'

      common /userdrude/ jn(lpts,3),kjn(lpts,3),resjn(lpts,3)
     $     ,drudeparams(lpts,2),drudeindex(lpts),ndrude
      integer drudeindex,ndrude
      real jn,kjn,resjn,drudeparams

      common /userparam/ omega,eps1,eps2,mu1,mu2,eta1,eta2,k1,k2,
     $     mydrudea,mydrudeb,refl,tran
      real omega,eps1,mu1,mu2,eta1,k1,mydrudea,mydrudeb
      complex eps2,eta2,k2,refl,tran

      real tt
      real hx(lpts),hy(lpts),hz(lpts)
      real ex(lpts),ey(lpts),ez(lpts)

      integer i,j
      real mu,eps,yy
      complex sigmadrude,efac,CI
      parameter (CI = (0.0,1.0))

      call usersol(tt,hx,hy,hz,ex,ey,ez)
c     We need to set the extra PML fields too
      do i = 1,npts
         mu = permeability(i)
         eps = permittivity(i)
         pmlbn(i,1) = mu*hx(i)
         pmlbn(i,2) = mu*hy(i)
         pmlbn(i,3) = mu*hz(i)
         pmldn(i,1) = eps*ex(i)
         pmldn(i,2) = eps*ey(i)
         pmldn(i,3) = eps*ez(i)
      enddo

c     Initialize the current
      do i = 1,ndrude
         j = drudeindex(i)

         yy = ym1(j,1,1,1)
         efac = tran*eta2*cexp(CI*(-k2*yy-omega*tt))
         sigmadrude = drudeparams(j,2)/(drudeparams(j,1)-CI*omega)
         jn(j,1) = dble(sigmadrude*efac)
      enddo
!$ACC UPDATE DEVICE(hx,hy,hz,ex,ey,ez,pmlbn,pmldn,jn)

      return
      end
c-----------------------------------------------------------------------
      subroutine usersol(tt,solhx,solhy,solhz,solex,soley,solez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'PML'

      common /userparam/ omega,eps1,eps2,mu1,mu2,eta1,eta2,k1,k2,
     $     mydrudea,mydrudeb,refl,tran
      real omega,eps1,mu1,mu2,eta1,k1,mydrudea,mydrudeb
      complex eps2,eta2,k2,refl,tran

      real tt
      real solhx(lpts),solhy(lpts),solhz(lpts)
      real solex(lpts),soley(lpts),solez(lpts)

      integer e,i,j,l,lx1_2
      real yy,d,pmlfac,pmlsigmamax
      complex usc,CI
      parameter (CI = (0.0,1.0))

      lx1_2 = lx1/2
      do e = 1,nelt
         do j = 1,ly1
            do i = 1,lx1
c     Global number
               l = i+nx1*(j-1)+nx1*ny1*(e-1)
               yy = ym1(i,j,1,e)
               if (ym1(lx1_2,lx1_2,1,e).gt.0.0) then
                  if (pmltag(e).ne.0) then
                     d = pmlouter(4)-pmlinner(4)
                     pmlsigmamax =
     $                    -(pmlorder+1)*log(pmlreferr)/(2.0*eta1*d)
                     pmlfac = (pmlsigmamax*d/(pmlorder+1))
     $                    *((yy-pmlinner(4))/d)**(pmlorder+1)
                  else
                     pmlfac = 0.0
                  endif
                  usc = refl*cexp(CI*(k1*yy-omega*tt)-eta1*pmlfac)
                  solhz(l) = dble(usc)
                  solex(l) = dble(-eta1*usc)
               else
                  usc = tran*cexp(CI*(-k2*yy-omega*tt))
                  solhz(l) = dble(usc)
                  solex(l) = dble(eta2*usc)
               endif
            enddo
         enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc(tt,srchx,srchy,srchz,srcex,srcey,srcez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      common /userdrude/ jn(lpts,3),kjn(lpts,3),resjn(lpts,3)
     $     ,drudeparams(lpts,2),drudeindex(lpts),ndrude
      integer drudeindex,ndrude
      real jn,kjn,resjn,drudeparams

      real tt
      real srchx(lpts),srchy(lpts),srchz(lpts)
      real srcex(lpts),srcey(lpts),srcez(lpts)

      call cem_maxwell_drude(jn,kjn,resjn,drudeparams,drudeindex,ndrude)

      return
      end
c-----------------------------------------------------------------------
      subroutine userfsrc(tt,srcfhx,srcfhy,srcfhz,srcfex,srcfey,srcfez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      real tt
      real srcfhx(lxzfl),srcfhy(lxzfl),srcfhz(lxzfl)
      real srcfex(lxzfl),srcfey(lxzfl),srcfez(lxzfl)

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,ielg)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      common /userincvars/ incindex,ninc
      integer incindex(lxzfl),ninc

      common /userdrude/ jn(lpts,3),kjn(lpts,3),resjn(lpts,3)
     $     ,drudeparams(lpts,2),drudeindex(lpts),ndrude
      integer drudeindex,ndrude
      real jn,kjn,resjn,drudeparams

      common /userparam/
     $     omega,               ! frequency of the incident wave
     $     eps1,                ! permittivity in upper region
c     Complex dielectric coefficient in the Drude material, i.e.
c     ceps2 = eps2 + chi(omega) where chi is the susceptibility. For the
c     Drude model we have
c
c     chi(omega) = -mydrudeb/(omega*(omega+CI*mydrudea))
c
     $     eps2,
     $     mu1,                 ! permeability in upper region
     $     mu2,                 ! permeability in lower region
     $     eta1,                ! impedance in upper region
     $     eta2,                ! impedance in lower region
     $     k1,                  ! wavenumber in upper region
     $     k2,                  ! wavenumber in lower region
     $     mydrudea,            ! loss
     $     mydrudeb,            ! square of the plasma frequency
     $     refl,                ! reflection coefficient
     $     tran                 ! transmission coefficient
      real omega,eps1,mu1,mu2,eta1,k1,mydrudea,mydrudeb
      complex eps2,eta2,k2,refl,tran

c     These don't do anything! This is a temporary measure until
c
c     https://github.com/NekCEM/NekCEM/issues/12
c
c     is resolved.
      integer ix,iy,iz,ielg

      logical markinc
      integer e,f,i,j,k,nx1_2,npts3
      complex z1,z2,CI
      parameter (CI = (0.0,1.0))

      omega = 5.0
      mu1 = 1.0
      mu2 = 1.0
      mydrudea = 0.0
      mydrudeb = 100.0
      eps1 = 1.0
      eps2 = 1.0-mydrudeb/(omega*(omega+CI*mydrudea))

      eta1 = sqrt(mu1/eps1)
      eta2 = csqrt(mu2/eps2)
c     Different compilers handle the branch cut differently; make sure
c     we're getting the right branch
      if (dble(eta2).eq.0.0.and.aimag(eta2).gt.0.0) then
         eta2 = -eta2
      endif
      k1 = omega*sqrt(mu1*eps1)
      k2 = omega*csqrt(mu2*eps2)
      refl = (eta1-eta2)/(eta1+eta2)
      tran = 2*eta1/(eta1+eta2)

      npts3 = npts*3
      call rzero(jn,npts3)
      call rzero(kjn,npts3)
      call rzero(resjn,npts3)

      nx1_2 = nx1/2
c     Set the permittivity and permeabilities; build an index for the
c     Drude material.
      ndrude = 0
      do e = 1,nelt
         if (ym1(nx1_2,nx1_2,1,e).gt.0) then
c     Upper region, dieletric material
            do i = 1,nxyz
               j = i+nx1*ny1*nz1*(e-1)
               permittivity(j) = eps1
               permeability(j) = mu1
            enddo
         else
c     Lower region, Drude material
            do i = 1,nxyz
               j = i+nx1*ny1*nz1*(e-1)
               ndrude = ndrude+1
               drudeindex(ndrude) = j
               drudeparams(j,1) = mydrudea
               drudeparams(j,2) = mydrudeb
               permittivity(j) = 1.0
               permeability(j) = mu2
            enddo
         endif
      enddo

c     Build an index of where the incident field needs to be added
      ninc = 0
      do e = 1,nelt
         if (ym1(nx1_2,nx1_2,1,e).gt.0.0) then
            markinc = .true.
            do f = 1,nfaces
               do i = 1,nxzf
c     j is the global face number
                  j = (e-1)*nxzf*nfaces+nxzf*(f-1)+i
c     k is the volume global number associated with face j.
                  k = cemface(j)
                  if (abs(ym1(k,1,1,1)).gt.1e-8) then
                     markinc = .false.
                     exit
                  endif
               enddo
               if (markinc) then
                  do i = 1,nxzf
                     ninc = ninc+1
                     j = (e-1)*nxzf*nfaces+nxzf*(f-1)+i
                     incindex(ninc) = j
                  enddo
               endif
            enddo
         endif
      enddo

!$ACC ENTER DATA COPYIN(drudeindex,drudeparams,jn,kjn,resjn)
!$ACC ENTER DATA COPYIN(incindex)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
c-----------------------------------------------------------------------
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
c-----------------------------------------------------------------------
c     Use this subroutine to set the dimensions of the domain.
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      integer e,f,i,j,n,nxy2
      real glmin,glmax
      real sx,sy,sz,xmid,ymid,zmid
      real xmin,ymin,zmin,xmax,ymax,zmax

      n = nx1*ny1*nz1*nelv

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)

      sx = 5.0
      sy = 10.0
      if (if3d) sz = 5.0

      do i = 1,n
         xm1(i,1,1,1) = sx*(xm1(i,1,1,1)-xmin)/(xmax-xmin)-(sx/2.0)
         ym1(i,1,1,1) = sy*(ym1(i,1,1,1)-ymin)/(ymax-ymin)-(sy/2.0)
         if (if3d) then
            zm1(i,1,1,1) = sz*(zm1(i,1,1,1)-zmin)/(zmax-zmin)-(sz/2.0)
         endif
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'RTIMER' 

      integer i
      real l2(6),linf(6)
      real l2tol(6),linftol(6)

      l2tol(1) = 0.0
      l2tol(2) = 0.0
      l2tol(3) = 1e-7
      l2tol(4) = 1e-7
      l2tol(5) = 1e-7
      l2tol(6) = 0.0

      linftol(1) = 0.0
      linftol(2) = 0.0
      linftol(3) = 5e-6
      linftol(4) = 5e-6
      linftol(5) = 5e-6
      linftol(6) = 0.0

      if (istep.le.10.or.mod(istep,iocomm).eq.0) then
         call usersol
     $     (time,shn(1,1),shn(1,2),shn(1,3),sen(1,1),sen(1,2),sen(1,3))
!$ACC UPDATE HOST(hn,en)
         call cem_error(hn(1,1),shn(1,1),errhn(1,1),npts,l2(1),linf(1))
         call cem_error(hn(1,2),shn(1,2),errhn(1,2),npts,l2(2),linf(2))
         call cem_error(hn(1,3),shn(1,3),errhn(1,3),npts,l2(3),linf(3))
         call cem_error(en(1,1),sen(1,1),erren(1,1),npts,l2(4),linf(4))
         call cem_error(en(1,2),sen(1,2),erren(1,2),npts,l2(5),linf(5))
         call cem_error(en(1,3),sen(1,3),erren(1,3),npts,l2(6),linf(6))

         call userprint(istep,time,dt,l2,linf,cpu_t,cpu_p_t)

         do i = 1,6
            if (l2(i).gt.l2tol(i)) call exitt(1)
            if (linf(i).gt.linftol(i)) call exitt(1)
         enddo
      endif

#ifdef _OPENACC
      if (istep.eq.nsteps) call finalize
#endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userprint(istep,tt,dt,l2,linf,t1,t2)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      integer istep
      real tt,dt,t1,t2
      real l2(6),linf(6)

      integer k

      if (nid.eq.0) then
         write(6,101) istep,nelt,nx1-1,npts,tt,dt,(l2(k),k=1,6),t1,t2
         write(6,102) istep,nelt,nx1-1,npts,tt,dt,(linf(k),k=1,6),t1,t2
      endif

 101  format(/,i10,i6,i4,i9,1p9e10.3,e9.2,' CPU: L2')
 102  format(  i10,i6,i4,i9,1p9e10.3,e9.2,' CPU: Linf')

      return
      end
c-----------------------------------------------------------------------
      subroutine finalize
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      common /userincvars/ incindex,ninc
      integer incindex(lxzfl),ninc

      common /userdrude/ jn(lpts,3),kjn(lpts,3),resjn(lpts,3)
     $     ,drudeparams(lpts,2),drudeindex(lpts),ndrude
      integer drudeindex,ndrude
      real jn,kjn,resjn,drudeparams

!$ACC EXIT DATA DELETE(drudeindex,drudeparams,jn,kjn,resjn)
!$ACC EXIT DATA DELETE(incindex)

      return
      end
c-----------------------------------------------------------------------
