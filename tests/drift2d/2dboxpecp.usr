c-----------------------------------------------------------------------
c
c  USER SPECIFIED ROUTINES:
c
c     - boundary conditions
c     - initial conditions
c     - variable properties
c     - forcing function for fluid (f)
c     - forcing function for passive scalar (q)
c     - general purpose routine for checking errors etc.
c
c-----------------------------------------------------------------------
      subroutine userinc
c-----------------------------------------------------------------------

      return
      end
c-----------------------------------------------------------------------
      subroutine userini(tt,myhx,myhy,myhz,myex,myey,myez)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'DRIFT'
      include 'POISSON'

      real tt
      real myhx(lx1*ly1*lz1*lelt)
      real myhy(lx1*ly1*lz1*lelt)
      real myhz(lx1*ly1*lz1*lelt)
      real myex(lx1*ly1*lz1*lelt)
      real myey(lx1*ly1*lz1*lelt)
      real myez(lx1*ly1*lz1*lelt)

      tt = 1.0
      do ie = 1,nelt
         do i = 1,nxyz
            j = (ie-1)*nxyz+i
            xx = xm1(i,1,1,ie)
            yy = ym1(i,1,1,ie)
            tmp = (sin(pi*xx)*sin(tt))**2
            cN(j) = tmp         ! cN or potent
            cP(j) = tmp*2.0     ! cP
            cE(j) = 0.0         ! cE
         enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usersol(tt,myshx,myshy,myshz,mysex,mysey,mysez)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'DRIFT'

      real tt
      real myshx(lx1*ly1*lz1*lelt)
      real myshy(lx1*ly1*lz1*lelt)
      real myshz(lx1*ly1*lz1*lelt)
      real mysex(lx1*ly1*lz1*lelt)
      real mysey(lx1*ly1*lz1*lelt)
      real mysez(lx1*ly1*lz1*lelt)

      real xx,yy,zz,tmp
      integer i,j,ie

      do ie = 1,nelt
         do i = 1,nxyz
            j = (ie-1)*nxyz+i
            xx = xm1(i,1,1,ie)
            yy = ym1(i,1,1,ie)
            tmp = (sin(pi*xx)*sin(tt))**2
            myshx(j) = tmp      ! cN or potent
            myshy(j) = tmp*2.0  ! cP
            myshz(j) = 0.0      ! cE
            mysex(j) = 0.0      ! dummy
            mysey(j) = 0.0      ! dummy
            mysez(j) = 0.0      ! dummy
         enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc
     $            (baseidx,rhs_cn,rhs_cp,rhs_ce,rhs_phi,dumm1,dumm2)     
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'DRIFT'
      include 'POISSON'
      include 'RK5'
      include 'BCS'
      integer i,j,i0,baseidx
      real xx,yy,tt,pi2
      real sinx,cosx2,sinx2,sint2,dudx,dudy,uu
      real tmp1,tmp2,tmp3,tmp4
      real rhs_cn(1),rhs_cp(1),rhs_ce(1),rhs_phi(1)
      real nbc_cn(lx1*ly1*lz1*lelt)
      real nbc_cp(lx1*ly1*lz1*lelt)
      real nbc_ce(lx1*ly1*lz1*lelt)
      real nbc_phi(lx1*ly1*lz1*lelt)

      real dumm1(1),dumm2(1)
      real unx0,uny0,unz0,area0

c     Source for c_n,c_p,c_e at current step: time = istep*dt = time+dt
      if (ifrk) then
         tt=rktime
      else
         tt=time+dt
      endif
      pi2 = pi*pi
      do i=1,npts
         xx = xm1(i,1,1,1)
         yy = ym1(i,1,1,1)
         sint2 = sin(tt)**2
         sinx = sin(pi*xx)
         sinx2 = sin(2.0*pi*xx)
         cosx2 = cos(2.0*pi*xx)
         uu = (sinx**2)*sint2
         dudx = pi*sinx2 *sint2
         dudy = 0.d0

         tmp1 = sin(2.0*tt)*sinx**2 ! dudt
         tmp2 = -2.*pi2*sin(tt)**2*cosx2 !-laplace(u)
         tmp3 = (dudx**2+dudy**2) ! grad(phi)*grad(u)
         tmp4 = uu*(-tmp2)      ! u*laplace(phi)

         rhs_cn(i) = tmp1+tmp2+tmp3+tmp4
         rhs_cp(i) = (tmp1+tmp2-tmp3-tmp4)*2.0
         rhs_ce(i) =  0.0
      enddo
      call col2(rhs_cN,bmn,npts)
      call col2(rhs_cP,bmn,npts)

c     Source for Neumann boundary value at time
      if (ifrk) then
         tt=rktime
      else
         tt=time+dt
      endif
      call rzero(nbc_cn,npts)
      call rzero(nbc_cp,npts)
      do i = 1,ncemface_nmn(1)
         j = cemface_nmn(i,1)
         i0 = cemface(j)
         xx = xm1(i0,1,1,1)
         yy = ym1(i0,1,1,1)
         unx0 = unxm(j)
         uny0 = unym(j)
         area0 = aream(j)
         sint2 = sin(tt)**2
         sinx = sin(pi*xx)
         sinx2 = sin(2.0*pi*xx)
         cosx2 = cos(2.0*pi*xx)
         uu = (sinx**2)*sint2   ! u
         dudx = pi*sinx2 *sint2
         dudy = 0.d0
         tmp1 = unx0*dudx+uny0*dudy
         nbc_cn(i0) = tmp1*area0
         tmp2 = (unx0*dudx+uny0*dudy)*2.0
         nbc_cp(i0) = tmp2*area0
      enddo
      call add2s2(rhs_cn,nbc_cn,1.0,npts)
      call add2s2(rhs_cp,nbc_cp,1.0,npts)

c     Source for potential field (phi) at time
      tt = time
      do i = 1,npts
         xx = xm1(i,1,1,1)
         yy = ym1(i,1,1,1)

         sint2 = sin(tt)**2
         cosx2 = cos(2.0*pi*xx)
         sinx = sin(pi*xx)

         tmp1 = sinx**2*sint2   ! u
         tmp2 = -2.0*pi**2*sint2*cosx2
         tmp3 = tmp2-charge(i)*tmp1
         rhs_phi(i) = charge(i)*(cP(i)-cN(i))
         rhs_phi(i) = rhs_phi(i)+tmp3
      enddo
      call col2(rhs_phi,bmn,npts)

c     Source for potential field (phi) with Neumann boundary value at time
      tt = time
      call rzero(nbc_phi,npts)
      do i = 1,ncemface_nmn(1)
         j = cemface_nmn(i,1)
         i0 = cemface(j)
         xx = xm1(i0,1,1,1)
         yy = ym1(i0,1,1,1)
         unx0 = unxm(j)
         uny0 = unym(j)
         area0 = aream(j)
         sint2 = sin(tt)**2
         sinx = sin(pi*xx)
         sinx2 = sin(2.0*pi*xx)
         cosx2 = cos(2.0*pi*xx)
         uu = (sinx**2)*sint2   ! u
         dudx = pi*sinx2 *sint2
         dudy = 0.d0
         tmp1 = unx0*dudx+uny0*dudy
         nbc_phi(i0) = tmp1*area0
      enddo
      call add2s2(rhs_phi,nbc_phi,1.0,npts)

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,iel)
c---------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'DRIFT'
      include 'POISSON'
      integer i,j,k,l,ie,ieg
      real tmp

      if (ifsol) then
         K_beta = 1.0
         temperature = 1.0
         tau_n = 1
         tau_p = 1

         call rone(d_permit,npts)
         call rone(d_permea,npts)
      else
         if (nid.eq.0) write(6,*) 'this is exact solution case'
         call exitt
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      real rscale
      real xmin,ymin,zmin,xmax,ymax,zmax

      n = nx1*ny1*nz1*nelt

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)

      rscale = 0.02
      sx = 100.0*rscale/(xmax-xmin)
      sy = 100.0*rscale/(ymax-ymin)
      if (nid.eq.0) write(6,*) 'sx/sy',sx,sy,rscale

      do i = 1,n
         xm1(i,1,1,1) = sx*(xm1(i,1,1,1)-xmin)-1.0
         ym1(i,1,1,1) = sy*(ym1(i,1,1,1)-ymin)-1.0
      enddo

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)

      if (nid.eq.0) write(6,*) 'xmin/xmax', xmin,xmax
      if (nid.eq.0) write(6,*) 'ymin/ymax', xmin,xmax
      mx = nx1/2
      my = ny1/2
      mz = 1
      do ie=1,nelt

         xxmax = vlmax(xm1(1,1,1,ie),nxyz)
         xxmin = vlmin(xm1(1,1,1,ie),nxyz)
         yymax = vlmax(ym1(1,1,1,ie),nxyz)
         yymin = vlmin(ym1(1,1,1,ie),nxyz)

         xxmid = xm1(mx,my,mz,ie)
         yymid = ym1(mx,my,mz,ie)

         if (yymid.gt. 0) then
            if_in_region(ie) =  1
         else
            if_in_region(ie) = -1
         endif

      enddo
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'DRIFT'
      include 'POISSON'

      common /ccpu/ cpu_t,cpu_dtime,cpu_chk
      real cpu_t,cpu_dtime,cpu_chk

      integer i
      real l2(6),linf(6)
      real l2tol(6),linftol(6)
      real cpu_p_t
      real dummy(lx1*ly1*lz1*lelt)

      l2(1) = 0.0
      l2(2) = 0.0
      l2(3) = 0.0
      l2(4) = 0.0
      l2(5) = 0.0
      l2(6) = 0.0

      linf(1) = 0.0
      linf(2) = 0.0
      linf(3) = 0.0
      linf(4) = 0.0
      linf(5) = 0.0
      linf(6) = 0.0

      l2tol(1) = 5e-9
      l2tol(2) = 5e-9
      l2tol(3) = 0.0
      l2tol(4) = 5e-10
      l2tol(5) = 0.0
      l2tol(6) = 0.0

      linftol(1) = 5e-9
      linftol(2) = 5e-9
      linftol(3) = 0.0
      linftol(4) = 5e-10
      linftol(5) = 0.0
      linftol(6) = 0.0

      if (istep.le.10.or.mod(istep,iocomm).eq.0) then
         call usersol(time,scn,scp,sce,dummy,dummy,dummy)
         call usersol(time-dt,spotent,dummy,dummy,dummy,dummy,dummy)

         call cem_error(cN,scN,errN,npts,l2(1),linf(1))
         call cem_error(cP,scP,errP,npts,l2(2),linf(2))
         call cem_error(potent,spotent,epotent,npts,l2(4),linf(4))

         call userprint(istep,time,dt,l2,linf,cpu_t,cpu_p_t)

         if (istep.eq.nsteps) then
            do i = 1,6
               if (l2(i).gt.l2tol(i)) stop 1
               if (linf(i).gt.linftol(i)) stop 1
            enddo
         endif
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userprint(istep,tt,dt,l2,linf,t1,t2)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      integer istep
      real tt,dt,t1,t2
      real l2(6),linf(6)

      integer k

      if (nid.eq.0) then
         write(6,101) istep,nelt,nx1-1,npts,tt,dt,(l2(k),k=1,6),t1,t2
         write(6,102) istep,nelt,nx1-1,npts,tt,dt,(linf(k),k=1,6),t1,t2
      endif

 101  format(/,i10,i6,i4,i9,1p9e10.3,e9.2,' CPU: L2')
 102  format(  i10,i6,i4,i9,1p9e10.3,e9.2,' CPU: Linf')

      return
      end
