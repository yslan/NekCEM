c-----------------------------------------------------------------------
c
c  USER SPECIFIED ROUTINES:
c
c     - boundary conditions
c     - initial conditions
c     - variable properties
c     - forcing function for fluid (f)
c     - forcing function for passive scalar (q)
c     - general purpose routine for checking errors etc.
c
c-----------------------------------------------------------------------
      subroutine userinc
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine userini(tt,mycn)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'DRIFT'
      real zz
      real mycn(lx1*ly1*lz1*lelt,lcdim) !cN 

      integer i,nion
      real alpha,ex_cn,ex_cp,in_turb 

      alpha = 1.0

      do i = 1,npts
        zz = zm1(i,1,1,1)
        in_turb = 2.0*sin(20*pi*zz) 

        ex_cn = exp(1.5+sin(alpha*pi*zz)) ! ex sol for cn
        ex_cp = exp(2.0-sin(alpha*pi*zz)) ! ex sol for cp

        mycn(i,1) = exp(1.5) !ex_cn + in_turb
        mycn(i,2) = exp(2.0) !ex_cp + in_turb
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usersol(tt,myscn1,myscn2,myscn3,myscn4,myscn5,myscn6)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'DRIFT'

      real tt
      real myscn1(lx1*ly1*lz1*lelt) ! potent
      real myscn2(lx1*ly1*lz1*lelt,lcdim) !cN
      real myscn3(lx1*ly1*lz1*lelt)
      real myscn4(lx1*ly1*lz1*lelt)
      real myscn5(lx1*ly1*lz1*lelt)
      real myscn6(lx1*ly1*lz1*lelt)

      real xx, yy, zz
      real alpha, ex_cn, ex_cp !contruct ex sol
      integer i,nion

      alpha = 1.0

      do i=1,npts
         zz  = zm1(i,1,1,1)

         ex_cn = exp(1.5+sin(alpha*pi*zz)) ! ex sol for cn
         ex_cp = exp(2.0-sin(alpha*pi*zz)) ! ex sol for cp

         myscn2(i,1) = ex_cn
         myscn2(i,2) = ex_cp
         myscn1(i) = sin(alpha*pi*zz) ! ex sol for phi  
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc(tt,rhs_phi,rhs_cn,dummy1,dummy2,dummy3,dummy4)     
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'DRIFT'
      include 'POISSON'
      include 'BCS'

      integer i,j,k,ic,nion
      real    tt, zz
      real    rhs_cn(lpts1,lcdim)
      real    rhs_phi(1),dummy1(1),dummy2(1),dummy3(1),dummy4(1)
      real    zmax,zmin,glmax,glmin
      real    eps, alpha, tmp2, tmp3 ! for constructing exact sol.
      real    cnp_max ! estimating in STERIC

      alpha = 1.0
      eps = 1.e-14
      
      call rzero(rhs_cN(1,1),npts)
      call rzero(rhs_cN(1,2),npts)

      if (ncemface_pec(2).ge.1)  then ! second field  cn 

         do i=1,ncemface_pec(2)
            j = cemface_pec(i,2)
            k = cemface(j)
            zz = zm1(k,1,1,1)

            if (abs(zz+1).lt.eps) then
               cn(k,1) = exp(1.5) 
            elseif (abs(zz-1).lt.eps) then
               cn(k,1) = exp(1.5) 
            endif
         enddo
      endif

      if (ncemface_pec(3).ge.1)  then ! third field cp

         do i=1,ncemface_pec(3)
            j = cemface_pec(i,3) 
            k = cemface(j)      
            zz = zm1(k,1,1,1)
         
            if (abs(zz+1).lt.eps) then ! zz=-1
               cn(k,2) = exp(2.0) 
            elseif (abs(zz-1).lt.eps) then
               cn(k,2) = exp(2.0) 
            endif
         enddo

      endif


c.....source for potential field (phi) at time
      call rzero(rhs_phi,npts)
      do ic = 1,lcdim
        call add2s2(rhs_phi,cN(1,ic),zvalence(ic),npts)
      enddo
      call add2s2(rhs_phi,charge,1.0,npts)
      call col2(rhs_phi,bmn,npts)

c.....scale_potent has to be fixed 

      if (ncemface_pec(1).gt.0) then
        do i = 1,ncemface_pec(1)
          j = cemface_pec(i,1) 
          k = cemface(j)     
          zz = zm1(k,1,1,1)
          if (abs(zz+1).lt.eps) then ! zz=-1
             potent(k) = 0.0 
          elseif (abs(zz-1).lt.eps) then
             potent(k) = 0.0 
          endif
        enddo
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,iel)
c---------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'DRIFT'
      include 'POISSON'

      parameter(lt=lx1*ly1*lz1*lelt)
      common /myfields/ perm(lt),diff(lt),distp(lt),psrc(lt)
     $                , phip(lt),phix(lt),phiy(lt),phiz(lt)
     
      integer i,j,k,l,ie,ieg,ic
      real tmp, D_n_max, D_p_max
      real tmp2, tmp3, alpha, ex_cn, ex_cp

      D_n_max = 1.0
      D_p_max = 1.0
      alpha = 1.0
      
      do i= 1,npts 
         d_permit(i)=  1.0
         d_permea(i)=  1.0
         mu_n    (i,1)=  1.0 
         mu_n    (i,2)=  1.0 

         zvalence(1) = -1.0
         zvalence(2) =  1.0

         zz  = zm1(i,1,1,1)

         ex_cp = exp(2.0-sin(alpha*pi*zz)) ! ex sol for zp*cp
         ex_cn = exp(1.5+sin(alpha*pi*zz)) ! ex sol for zn*cn

         tmp2 =  1.0 * ex_cp
         tmp3 = -1.0 * ex_cn ! negative valence
          
         charge(i)=  alpha*alpha*pi*pi*sin(alpha*pi*zz) - tmp2 - tmp3 ! ex sol for Q  
      enddo

      do ic = 1,lcdim
        call copy(diff_n(1,ic),mu_n(1,ic),npts)
      enddo

      call usernewton

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

      real rscale
      real xmin,ymin,zmin,xmax,ymax,zmax
      real pdat(6000,5)

      xmin = glmin(xm1,npts)
      xmax = glmax(xm1,npts)
      ymin = glmin(ym1,npts)
      ymax = glmax(ym1,npts)
      zmin = glmin(zm1,npts)
      zmax = glmax(zm1,npts)

      sx = 0.4/(xmax-xmin)
      sy = 0.4/(ymax-ymin)
      sz = 2.0/(zmax-zmin)

      do i = 1,npts
         xm1(i,1,1,1) = sx*(xm1(i,1,1,1)-xmin)-0.2
         ym1(i,1,1,1) = sy*(ym1(i,1,1,1)-ymin)-0.2
         zm1(i,1,1,1) = sz*(zm1(i,1,1,1)-zmin)-1.0
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'DRIFT'
      include 'POISSON'
      include 'RTIMER'

      integer i
      real l2(6),linf(6)
      real l2tol(6),linftol(6)
      real dummy(lx1*ly1*lz1*lelt)

      l2(1) = 0.0
      l2(2) = 0.0
      l2(3) = 0.0
      l2(4) = 0.0
      l2(5) = 0.0
      l2(6) = 0.0

      linf(1) = 0.0
      linf(2) = 0.0
      linf(3) = 0.0
      linf(4) = 0.0
      linf(5) = 0.0
      linf(6) = 0.0

      l2tol(1) = 8e-6
      l2tol(2) = 8e-6
      l2tol(3) = 0.0
      l2tol(4) = 2e-8 
      l2tol(5) = 0.0
      l2tol(6) = 0.0

      linftol(1) = 8e-6
      linftol(2) = 8e-6
      linftol(3) = 0.0
      linftol(4) = 2e-8
      linftol(5) = 0.0
      linftol(6) = 0.0

      if (istep.le.10.or.mod(istep,iocomm).eq.0) then
         call usersol(time,spotent,scn,dummy,dummy,dummy,dummy)

         call cem_error(cN(1,1),scN(1,1),errcN(1,1),npts,l2(1),linf(1))
         call cem_error(cN(1,2),scN(1,2),errcN(1,2),npts,l2(2),linf(2))
         call cem_error(potent,spotent,epotent,npts,l2(4),linf(4))

         call userprint(istep,time,dt,l2,linf,cpu_t,cpu_p_t)

         if (istep.eq.10) then ! error at NT10
            do i = 1,6
               if (l2(i).gt.l2tol(i)) call exitt(1)
               if (linf(i).gt.linftol(i)) call exitt(1)
            enddo
         endif
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userprint(istep,tt,dt,l2,linf,t1,t2)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      integer istep
      real tt,dt,t1,t2
      real l2(6),linf(6)

      integer k

      if (nid.eq.0) then
         write(6,101) istep,nelt,nx1-1,npts,tt,dt,(l2(k),k=1,6),t1,t2
         write(6,102) istep,nelt,nx1-1,npts,tt,dt,(linf(k),k=1,6),t1,t2
      endif

 101  format(/,i10,i6,i4,i9,1p9e10.3,e9.2,' CPU: L2')
 102  format(  i10,i6,i4,i9,1p9e10.3,e9.2,' CPU: Linf')

      return
      end
c-----------------------------------------------------------------------
      subroutine usernewton
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'DRIFT'
      include 'NEWTON'

      real paramNT(20)
      integer nn,i

      ifparamNT = .false. ! false = default, true = set param at here

c     Set Parameters manually
      ifsep    = 1        ! 0=couple, 1=separate, Lan

      alphaNT  = 1.0      ! relaxation parameter \alpha \in (0,1]
      maxit    = 20       ! iteration for Newton method
      jaceps   = 1e-5     ! perturbation parameter for Jacobi-free
      tolNT    = 1e-5     ! tolerance for Newton method

      dtNT     = param(1) ! pseudo-transient time step
                          !   it can grow as istep increase 
      f_pre    = 0.0      ! zero to set dtNT (or SER)
      max_dtNT = 1E5      ! Max. of dtNT, avoid NaN
      min_ftol  = 1E-12    ! Min. of tol,  avoid NaN


c     hack for restart
      if (ifrestart) then
        ifparamNT = .true.
        call read_paramNT
      endif

      return
      end
c-----------------------------------------------------------------------
