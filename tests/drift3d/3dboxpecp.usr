c-----------------------------------------------------------------------
c
c  USER SPECIFIED ROUTINES:
c
c     - boundary conditions
c     - initial conditions
c     - variable properties
c     - forcing function for fluid (f)
c     - forcing function for passive scalar (q)
c     - general purpose routine for checking errors etc.
c
c-----------------------------------------------------------------------
      subroutine userinc
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine userini(tt,mycn)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'DRIFT'
      include 'POISSON'

      real tt
      real mycn(lpts,lcdim) !cn
      real xx,yy,zz,tmp
      integer i

      tt = 1.0

      do i = 1,npts
         xx = xm1(i,1,1,1)
         yy = ym1(i,1,1,1)
         zz = zm1(i,1,1,1)
         tmp = sin(pi*xx)*sin(pi*yy)*sin(pi*zz)*sin(tt)
         mycn(i,1) = tmp**2
         mycn(i,2) = 2.0*tmp**2
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usersol(tt,myscn1,myscn2,myscn3,myscn4,myscn5,myscn6)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'DRIFT'

      real tt
      real myscn1(lpts) ! potent
      real myscn2(lpts) ! cN
      real myscn3(lpts) ! cP
      real myscn4(lpts)
      real myscn5(lpts)
      real myscn6(lpts)

      real xx,yy,zz,tmp
      integer i

      do i = 1,npts
         xx = xm1(i,1,1,1)
         yy = ym1(i,1,1,1)
         zz = zm1(i,1,1,1)
         tmp = sin(pi*xx)*sin(pi*yy)*sin(pi*zz)*sin(tt)
         myscn1(i) = tmp**2     !potent
         myscn2(i) = tmp**2     !cN
         myscn3(i) = 2.0*tmp**2 !cP
         myscn4(i) = 0.0
         myscn5(i) = 0.0
         myscn6(i) = 0.0
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc (tt,rhs_phi,rhs_cn,dumm1,dumm2,dumm3,dumm4)
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'DRIFT'
      include 'POISSON'
      include 'BCS'

      real tt
      real xx,yy,zz,pi2
      real sinx,cosx2,sinx2,sint2,sinxyz2
      real siny,cosy2,siny2
      real sinz,cosz2,sinz2
      real sinxy2,sinyz2,sinxz2
      real dudx,dudy,dudz,uu
      real tmp,tmp1,tmp2,tmp3,tmp4

      real rhs_cn(lpts1,lcdim),rhs_phi(lpts1)
      real dumm1(lx1*ly1*lz1*lelt)
      real dumm2(lx1*ly1*lz1*lelt)
      real dumm3(lx1*ly1*lz1*lelt)
      real dumm4(lx1*ly1*lz1*lelt)

      integer i,j,k

      real ttp,ttc,time_previous,time_next

      time_previous= tt
      time_next    = tt + dt
      ttc = time_next
      ttp = time_previous

c.....source for c_n,c_p,c_e at current step: time= istep*dt = time+dt
      pi2 = 2.0*pi*pi

      if (ncemface_pec(2).ge.1) then

        do i = 1,ncemface_pec(2)
          j = cemface_pec(i,2)
          k = cemface(j)               ! surface index to volume index
          xx = xm1(k,1,1,1)
          yy = ym1(k,1,1,1)
          zz = zm1(k,1,1,1)
          tmp = sin(pi*xx)*sin(pi*yy)*sin(pi*zz)*sin(ttc)
          cN(k,1) = tmp**2
        enddo

      endif

      if (ncemface_pec(3).ge.1) then

        do i = 1,ncemface_pec(3)
          j = cemface_pec(i,3)
          k = cemface(j)               ! surface index to volume index
          xx = xm1(k,1,1,1)
          yy = ym1(k,1,1,1)
          zz = zm1(k,1,1,1)
          tmp = sin(pi*xx)*sin(pi*yy)*sin(pi*zz)*sin(ttc)
          cN(k,2) = 2.0*tmp**2
        enddo
      endif


      do i = 1,npts
         xx = xm1(i,1,1,1)
         yy = ym1(i,1,1,1)
         zz = zm1(i,1,1,1)
         sint2 = sin(ttp)**2
         sinx = sin(pi*xx)
         siny = sin(pi*yy)
         sinz = sin(pi*zz)
         sinx2 = sin(2.0*pi*xx)
         cosx2 = cos(2.0*pi*xx)
         siny2 = sin(2.0*pi*yy)
         cosy2 = cos(2.0*pi*yy)
         sinz2 = sin(2.0*pi*zz)
         cosz2 = cos(2.0*pi*zz)
         sinxyz2= (sinx*siny*sinz)**2
         sinxy2= (sinx*siny)**2
         sinyz2= (siny*sinz)**2
         sinxz2= (sinx*sinz)**2

         uu = sinxyz2*sint2  ! u
         dudx = pi*sinx2*sinyz2*sint2
         dudy = pi*siny2*sinxz2*sint2
         dudz = pi*sinz2*sinxy2*sint2

         tmp1 = sin(2.0*ttp)*sinxyz2 ! dudt
         tmp2 = -pi2*sint2*cosx2*sinyz2
     $          -pi2*sint2*cosy2*sinxz2
     $          -pi2*sint2*cosz2*sinxy2
         tmp3  = (dudx**2+dudy**2+dudz**2) ! grad(phi)*grad(u)
         tmp4  = uu*(-tmp2)     ! u*laplace(phi)

         rhs_cn(i,1)= tmp1+tmp2+tmp3+tmp4
         rhs_cn(i,2)= (tmp1+tmp2-tmp3-tmp4)*2.0
      enddo

c     Source for potential field (phi) at time

      if (ncemface_pec(1).ge.1) then

        do i = 1,ncemface_pec(1)
          j = cemface_pec(i,1)
          k = cemface(j)               ! surface index to volume index
          xx = xm1(k,1,1,1)
          yy = ym1(k,1,1,1)
          zz = zm1(k,1,1,1)
          tmp = sin(pi*xx)*sin(pi*yy)*sin(pi*zz)*sin(ttp)
          potent(k) = tmp**2
        enddo

      endif

      do i=1,npts
         xx = xm1(i,1,1,1)
         yy = ym1(i,1,1,1)
         zz = zm1(i,1,1,1)

         sint2 = sin(ttp)**2
         cosx2 = cos(2.0*pi*xx)
         cosy2 = cos(2.0*pi*yy)
         cosz2 = cos(2.0*pi*zz)
         sinx = sin(pi*xx)
         siny = sin(pi*yy)
         sinz = sin(pi*zz)
         sinxyz2 =(sinx*siny*sinz)**2
         sinxy2 = (sinx*siny)**2
         sinyz2 = (siny*sinz)**2
         sinxz2 = (sinx*sinz)**2

         tmp1 = sinxyz2*sint2  ! u
         tmp2 = -pi2*sint2*cosx2*sinyz2
     $          -pi2*sint2*cosy2*sinxz2
     $          -pi2*sint2*cosz2*sinxy2
         tmp3 = tmp2-charge(i)*tmp1
         rhs_phi(i) = charge(i)*(cN(i,2)-cN(i,1))
         rhs_phi(i) = rhs_phi(i)+tmp3
      enddo

      call col2(rhs_phi,bmn,npts)
      call col2(rhs_cn(1,1),bmn,npts)
      call col2(rhs_cn(1,2),bmn,npts)

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,iel)
c---------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'DRIFT'
      include 'POISSON'

c     if (nid.eq.0) write(6,*) 'this is nondimension unit'

      zvalence(1) = -1.0 ! cN
      zvalence(2) =  1.0 ! cP

      call rone (diff_n(1,1),npts)
      call rone (diff_n(1,2),npts)
c      call rone (diff_n(1,3),npts)

      call rone (mu_n(1,1)  ,npts)
      call rone (mu_n(1,2)  ,npts)
c      call rone (mu_n(1,3)  ,npts)

c      call rone (  ni  ,npts) !Lan
      call rone (charge,npts)

      call rone(d_permit,npts)
      call rone(d_permea,npts)

c     if (nid.eq.0) write(6,*) 'define material properties'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat

      return
      end

c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

      real rscale
      real xmin,ymin,zmin,xmax,ymax,zmax

      n = nx1*ny1*nz1*nelv

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)

      rscale = 2.0
      sx = rscale/(xmax-xmin)
      sy = rscale/(ymax-ymin)
      sz = rscale/(zmax-zmin)

      do i=1,n
         xm1(i,1,1,1) = sx*(xm1(i,1,1,1)-xmin)-1.0
         ym1(i,1,1,1) = sy*(ym1(i,1,1,1)-ymin)-1.0
         zm1(i,1,1,1) = sz*(zm1(i,1,1,1)-zmin)-1.0
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'DRIFT'
      include 'POISSON'
      include 'RTIMER'

      integer i
      real l2(6),linf(6)
      real l2tol(6),linftol(6)
      real dummy(lx1*ly1*lz1*lelt)
      real dummy2(lx1*ly1*lz1*lelt,lcdim)

      call rzero(l2,6)
      call rzero(linf,6)

      l2tol(1) = 5e-7
      l2tol(2) = 5e-7
      l2tol(3) = 0.0
      l2tol(4) = 5e-9
      l2tol(5) = 0.0
      l2tol(6) = 0.0

      linftol(1) = 5e-6
      linftol(2) = 6e-6
      linftol(3) = 0.0
      linftol(4) = 5e-9
      linftol(5) = 0.0
      linftol(6) = 0.0

      if (istep.le.10.or.mod(istep,iocomm).eq.0) then
         call usersol(time,dummy,scn(1,1),scn(1,2),dummy,dummy,dummy)
         call usersol(time-dt,spotent,dummy,dummy,dummy,dummy,dummy)

         call cem_error(cN(1,1),scN(1,1),errcN(1,1),npts,l2(1),linf(1))
         call cem_error(cN(1,2),scN(1,2),errcN(1,2),npts,l2(2),linf(2))
         call cem_error(potent,spotent,epotent,npts,l2(4),linf(4))

         call userprint(istep,time,dt,l2,linf,cpu_t,cpu_p_t)

         if (istep.eq.nsteps) then
            do i = 1,6
               if (l2(i).gt.l2tol(i)) call exitt(1)
               if (linf(i).gt.linftol(i)) call exitt(1)
            enddo
         endif
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userprint(istep,tt,dt,l2,linf,t1,t2)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      integer istep
      real tt,dt,t1,t2
      real l2(6),linf(6)

      integer k

      if (nid.eq.0) then
         write(6,101) istep,nelt,nx1-1,npts,tt,dt,(l2(k),k=1,6),t1,t2
         write(6,102) istep,nelt,nx1-1,npts,tt,dt,(linf(k),k=1,6),t1,t2
      endif

 101  format(/,i10,i6,i4,i9,1p9e10.3,e9.2,' CPU: L2')
 102  format(  i10,i6,i4,i9,1p9e10.3,e9.2,' CPU: Linf')

      return
      end
c-----------------------------------------------------------------------
