c-----------------------------------------------------------------------
c
c  USER SPECIFIED ROUTINES:
c
c     - boundary conditions
c     - initial conditions
c     - variable properties
c     - forcing function for fluid (f)
c     - forcing function for passive scalar (q)
c     - general purpose routine for checking errors etc.
c
c-----------------------------------------------------------------------
      subroutine userinc
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      return
      end
c-----------------------------------------------------------------------
      subroutine userini(tt, myhx, myhy, myhz, myex, myey, myez)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'DRIFT'
      include 'NEKUSE'
      include 'POISSON'

      real tt
      real myhx(lx1,ly1,lz1,lelt)
      real myhy(lx1,ly1,lz1,lelt)
      real myhz(lx1,ly1,lz1,lelt)
      real myex(lx1,ly1,lz1,lelt)
      real myey(lx1,ly1,lz1,lelt)
      real myez(lx1,ly1,lz1,lelt)

      tt = 1.0

      do ie = 1,nelt
         do i = 1,nxyz
            j = (ie-1)*nxyz+i
            xx = xm1(i,1,1,ie)
            yy = ym1(i,1,1,ie)
            zz = zm1(i,1,1,ie)
            tmp = sin(pi*xx)*sin(pi*yy)*sin(pi*zz)*sin(tt)
            cN(j) = tmp**2
            cP(j) = 2.0*cN(j)
            cE(j) = 0.0
         enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usersol(tt,myscn, myscp, mysce, mysex, mysey, mysez)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'DRIFT'
      include 'NEKUSE'
      include 'GEOMBOUND'

      real myscN(lpts)
      real myscP(lpts)
      real myscE(lpts)

      real mysex(lx1,ly1,lz1,lelt)
      real mysey(lx1,ly1,lz1,lelt)
      real mysez(lx1,ly1,lz1,lelt)

      real xx,yy,zz,tt,tmp
      integer i,j,ie

      do ie = 1,nelt
         do i = 1,nxyz
            j = (ie-1)*nxyz+i
            xx = xm1(i,1,1,ie)
            yy = ym1(i,1,1,ie)
            zz = zm1(i,1,1,ie)
            tmp = sin(pi*xx)*sin(pi*yy)*sin(pi*zz)*sin(tt)
            myscN(j) = tmp**2
            myscP(j) = 2.0*myscN(j)
            myscE(j) = 0.0
         enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc
     $            (baseidx,rhs_cn,rhs_cp,rhs_ce,rhs_phi,dummy1,dummy2)     
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'DRIFT'
      include 'POISSON'
      integer i,baseidx
      real    xx,yy,zz,tt,pi2
      real    sinx,cosx2,sinx2,sint2,sinxyz2
      real    siny,cosy2,siny2
      real    sinz,cosz2,sinz2
      real    sinxy2,sinyz2,sinxz2
      real    dudx,dudy,dudz,uu
      real    tmp1,tmp2,tmp3,tmp4
      real    rhs_cn(1),rhs_cp(1),rhs_ce(1)
      real    rhs_phi(1), dummy1(1),dummy2(1)

c.....source for c_n,c_p,c_e at current step: time= istep*dt = time+dt
      tt=time+dt
      pi2 = pi*pi
      do i=1,npts
         xx    = xm1(i,1,1,1)
         yy    = ym1(i,1,1,1)
         zz    = zm1(i,1,1,1)
         sint2 = sin(tt)**2
         sinx  = sin(    pi*xx)
         siny  = sin(    pi*yy)
         sinz  = sin(    pi*zz)
         sinx2 = sin(2.0*pi*xx)
         cosx2 = cos(2.0*pi*xx)
         siny2 = sin(2.0*pi*yy)
         cosy2 = cos(2.0*pi*yy)
         sinz2 = sin(2.0*pi*zz)
         cosz2 = cos(2.0*pi*zz)
         sinxyz2=(sinx*siny*sinz)**2
         sinxy2=(sinx*siny)**2
         sinyz2=(siny*sinz)**2
         sinxz2=(sinx*sinz)**2

         uu    = sinxyz2*sint2  ! u
         dudx  = pi*sinx2*sinyz2*sint2
         dudy  = pi*siny2*sinxz2*sint2
         dudz  = pi*sinz2*sinxy2*sint2

         tmp1  =  sin(2.0*tt)*sinxyz2 ! dudt
         tmp2  = -2.*pi2*sint2*cosx2*sinyz2
     $           -2.*pi2*sint2*cosy2*sinxz2
     $           -2.*pi2*sint2*cosz2*sinxy2
         tmp3  = (dudx**2+dudy**2+dudz**2) ! grad(phi)*grad(u)
         tmp4  = uu*(-tmp2)     ! u*laplace(phi)

         rhs_cn(i)=  tmp1+tmp2+tmp3+tmp4
         rhs_cp(i)= (tmp1+tmp2-tmp3-tmp4)*2.0
         rhs_ce(i)=  0.0
      enddo
      call col2(rhs_cn,bmn,npts)
      call col2(rhs_cp,bmn,npts)
      call col2(rhs_ce,bmn,npts)

c     Source for potential field (phi) at time
      tt= time
      do i=1,npts
         xx   = xm1(i,1,1,1)
         yy   = ym1(i,1,1,1)
         zz   = zm1(i,1,1,1)

         sint2 = sin(tt)**2
         cosx2 = cos(2.0*pi*xx)
         cosy2 = cos(2.0*pi*yy)
         cosz2 = cos(2.0*pi*zz)
         sinx  = sin(    pi*xx)
         siny  = sin(    pi*yy)
         sinz  = sin(    pi*zz)
         sinxyz2=(sinx*siny*sinz)**2
         sinxy2=(sinx*siny)**2
         sinyz2=(siny*sinz)**2
         sinxz2=(sinx*sinz)**2

         tmp1  = sinxyz2*sint2  ! u
         tmp2  = -2.*pi2*sint2*cosx2*sinyz2
     $           -2.*pi2*sint2*cosy2*sinxz2
     $           -2.*pi2*sint2*cosz2*sinxy2
         tmp3 = tmp2-charge(i)*tmp1
         rhs_phi(i) = charge(i)*(cP(i)-cN(i))
         rhs_phi(i) = rhs_phi(i)+tmp3
      enddo
      call col2(rhs_phi,bmn,npts)
      return
      end
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,iel)
c---------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'EMWAVE'
      include 'DRIFT'
      include 'POISSON'

      integer i,j,k,l,ie,ieg
      real tmp

      call rone(mu_n,npts)
      call rone(mu_p,npts)
      call rone(mu_e,npts)
      call rone(ni,npts)

      K_beta=1.0
      temperature=1.0
      tau_n = 1
      tau_p = 1
      call rone(charge,npts)
      call rone(d_permit,npts)
      call rone(d_permea,npts)

      call copy(diff_n,mu_n,npts)
      call copy(diff_p,mu_p,npts)
      call copy(diff_e,mu_e,npts)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat

      return
      end

c-----------------------------------------------------------------------
      subroutine usrdat2

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'GEOMBOUND'

      real rscale

      n = nx1*ny1*nz1*nelv

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)

      rscale =0.02              ! FIXME FOR TESTING
      sx = 100.0*rscale/(xmax-xmin)
      sy = 100.0*rscale/(ymax-ymin)
      sz = 100.0*rscale/(zmax-zmin)

      if (nid.eq.0) write(6,*) 'sx/sy',sx,sy,rscale

      do i=1,n
         xm1(i,1,1,1) = sx*(xm1(i,1,1,1)-xmin)-1.0
         ym1(i,1,1,1) = sy*(ym1(i,1,1,1)-ymin)-1.0
         zm1(i,1,1,1) = sz*(zm1(i,1,1,1)-zmin)-1.0
      enddo

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)

      if (nid.eq.0) write(6,*) 'xmin/xmax', xmin,xmax
      if (nid.eq.0) write(6,*) 'ymin/ymax', ymin,ymax
      if (nid.eq.0) write(6,*) 'zmin/zmax', zmin,zmax

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'DRIFT'
      include 'POISSON'

      common /ccpu/ cpu_t,cpu_dtime,cpu_chk
      real cpu_t,cpu_dtime,cpu_chk

      integer i
      real l2(6),linf(6)
      real l2tol(6),linftol(6)
      real cpu_p_t
      real dummy(lx1*ly1*lz1*lelt)

      l2(1) = 0.0
      l2(2) = 0.0
      l2(3) = 0.0
      l2(4) = 0.0
      l2(5) = 0.0
      l2(6) = 0.0

      linf(1) = 0.0
      linf(2) = 0.0
      linf(3) = 0.0
      linf(4) = 0.0
      linf(5) = 0.0
      linf(6) = 0.0

      l2tol(1) = 5e-8
      l2tol(2) = 6e-8
      l2tol(3) = 0.0
      l2tol(4) = 5e-11
      l2tol(5) = 0.0
      l2tol(6) = 0.0

      linftol(1) = 5e-6
      linftol(2) = 6e-6
      linftol(3) = 0.0
      linftol(4) = 5e-10
      linftol(5) = 0.0
      linftol(6) = 0.0

      if (istep.le.10.or.mod(istep,iocomm).eq.0) then
         call usersol(time   ,scn,scp,sce,dummy,dummy,dummy)
         call usersol(time-dt,spotent,dummy,dummy,dummy,dummy,dummy)

         call cem_error(cN,scN,errN,npts,l2(1),linf(1))
         call cem_error(cP,scP,errP,npts,l2(2),linf(2))
         call cem_error(potent,spotent,epotent,npts,l2(4),linf(4))

         call userprint(istep,time,dt,l2,linf,cpu_t,cpu_p_t)

         if (istep.eq.nsteps) then
            do i = 1,6
               if (l2(i).gt.l2tol(i)) stop 1
               if (linf(i).gt.linftol(i)) stop 1
            enddo
         endif
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userprint(istep,tt,dt,l2,linf,t1,t2)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      integer istep
      real tt,dt,t1,t2
      real l2(6),linf(6)

      integer k

      if (nid.eq.0) then
         write(6,101) istep,nelt,nx1-1,npts,tt,dt,(l2(k),k=1,6),t1,t2
         write(6,102) istep,nelt,nx1-1,npts,tt,dt,(linf(k),k=1,6),t1,t2
      endif

 101  format(/,i10,i6,i4,i9,1p9e10.3,e9.2,' CPU: L2')
 102  format(  i10,i6,i4,i9,1p9e10.3,e9.2,' CPU: Linf')

      return
      end
c-----------------------------------------------------------------------
