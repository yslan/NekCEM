c-----------------------------------------------------------------------
c
c  USER SPECIFIED ROUTINES:
c
c     - boundary conditions
c     - initial conditions
c     - variable properties
c     - forcing function for fluid (f)
c     - forcing function for passive scalar (q)
c     - general purpose routine for checking errors etc.
c
c-----------------------------------------------------------------------
c-----------------------------------------------------------------------
      subroutine usersrc(baseidx,srchx,srchy,srchz,srcex,srcey,srcez)

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'PML'


      return
      end
c-----------------------------------------------------------------------
      subroutine userini(tt, myhx, myhy, myhz, myex, myey, myez)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'ACOUSTIC'

      real tt
      real myhx(lx1,ly1,lz1,lelt)
      real myhy(lx1,ly1,lz1,lelt)
      real myhz(lx1,ly1,lz1,lelt)
      real myex(lx1,ly1,lz1,lelt)
      real myey(lx1,ly1,lz1,lelt)
      real myez(lx1,ly1,lz1,lelt)

      mode= 1 !recpec

      do i=1,nx1*ny1*nz1*nelt

         xx=XM1(i,1,1,1)
         yy=YM1(i,1,1,1)
         zz=ZM1(i,1,1,1)
         theta= atan2(yy,xx)

        if     (mode.eq.1) then ! recper

           charge(i) =-2*pi*pi*cos(pi*xx)*cos(pi*yy) ! recper  
           !potent(i) =-2*pi*pi*cos(pi*xx)*cos(pi*yy) ! recper  
           spotent(i)= cos(pi*xx)*cos(pi*yy)
           sen(i,1) = pi*sin(pi*xx)*cos(pi*yy)
           sen(i,2) = pi*cos(pi*xx)*sin(pi*yy)
           sen(i,3) = 0.0

        elseif (mode.eq.2) then ! rec: pec

           charge(i) = -2*(2-xx**2-yy**2)             ! recpec  
           !potent(i) = -2*(2-xx**2-yy**2)             ! recpec  
           spotent(i)= (1-xx**2)*(1-yy**2)
           sen(i,1) = 2*xx*(1-yy**2)
           sen(i,2) = 2*yy*(1-xx**2)
           sen(i,3) = 0.0

        elseif (mode.eq.3) then ! cylinder pec boundary

           charge (i)= 4                             ! cylpec  
           spotent(i)= (rr**2-1)
           ee1=-2*rr
           ee2=0
           ee3=0
           sen(i,1) = cos(theta)*ee1-sin(theta)*ee2
           sen(i,2) = sin(theta)*ee1+cos(theta)*ee2

        endif
      enddo

      return
      end

c-----------------------------------------------------------------------
      subroutine usersol(tt, myshx, myshy, myshz, mysex, mysey, mysez)

c     Compute the exact solution at node indices (ix, iy, iz) in element iel.
C     for field number ii out of (Hx, Hy, Hz, Ex, Ey, Ez) at time tt.
c     Return result in u.

c     cf. doc/maxwell-analytic-2d.tm

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'GEOMBOUND'

      real tt
      real myshx(lx1,ly1,lz1,lelt)
      real myshy(lx1,ly1,lz1,lelt)
      real myshz(lx1,ly1,lz1,lelt)
      real mysex(lx1,ly1,lz1,lelt)
      real mysey(lx1,ly1,lz1,lelt)
      real mysez(lx1,ly1,lz1,lelt)
c     Mode selection

      integer nn, mm ! Mode selection, as in reference
      ! m >= 0, n>= 0
      real    tmscale
      logical ifcosine ! Mode selection, as in reference
      parameter (tmscale = 1) ! Scale factor of TM component

c     Local coordinates

c     Following variables named as in reference.
      real alpha, beta, omega, cplus, cminus

      complex iunit

      iunit = (0,1)

      nn    = param(80)
      mm    = param(81)
      ifcosine = param(82).ne.0

      do i=1,nx1*ny1*nz1*nelv
        ! find local coordinates
        xx=XM1(i,1,1,1)
        yy=YM1(i,1,1,1)
        zz=ZM1(i,1,1,1)

        ! compute helper quantities
        alpha = 2*pi*nn
        if (ifcosine) then
          cplus = 1
          cminus = 1
          beta = pi*(2*mm+1)
        else
          cplus = 1
          cminus = -1
          beta = 2*pi*mm
        endif

        omega = (alpha**2+beta**2)**0.5

        mysez(i,1,1,1) = tmscale * real(exp((0,1)*(alpha*x+omega*tt))
     $                * (cplus*exp((0,1)*beta*yy)
     $                   +cminus*exp(-(0,1)*beta*yy)))
        mysex(i,1,1,1) = 0
        mysey(i,1,1,1) = 0
        myshx(i,1,1,1) = tmscale * (-beta)/omega
     $                   *real(exp(iunit*(alpha*x+omega*tt))
     $                    *(cplus*exp(iunit*beta*yy)
     $                     -cminus*exp((-iunit)*beta*yy)))
        myshy(i,1,1,1) = tmscale * alpha/omega
     $                   *real(exp(iunit*(alpha*x+omega*tt))
     $                    *(cplus*exp(iunit*beta*yy)
     $                     +cminus*exp((-iunit)*beta*yy)))
        myshz(i,1,1,1) = 0
      enddo

      return
      end

c-----------------------------------------------------------------------

      subroutine uservp (ix,iy,iz,iel)
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      integer  n, ix, iy, iz, ieg
      real     one, xcc, ycc, zcc, x1, y1, z1
      real     lambda, fc, wc                     

      call usermedia   (ix,iy,iz,iel)

      if (IFPML)    call userpml   (ix,iy,iz,iel)
      if (IFDRUDE)  call userdrude (ix,iy,iz,iel)

      return
      end

c-----------------------------------------------------------------------

      subroutine usermedia(ix,iy,iz,iel) ! Vector form of userf
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      integer  n, ix, iy,iz, ieg
      real     one, xcc, ycc, zcc, x1, y1, z1
      real     lambda, fc, wc                     

      udiff  = 0.
      utrans = 0.

      permea = permea_0             
      permit = permit_0                

      return
      end

c-----------------------------------------------------------------------
      subroutine userdrude(ix,iy,iz,iel) ! Vector form of userf

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      return
      end

c-----------------------------------------------------------------------

      subroutine userpml(ix,iy,iz,iel) ! Vector form of userf
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      return
      end

c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix, iy, iz, ieg
C
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      return
      end

c-----------------------------------------------------------------------
      subroutine usrdat2

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      n    = nx1*ny1*nz1*nelv

c     ifxyo= .true.

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)

c     if (nid.eq.0) write(6,*) wavenumber,' This is wavenumber'

      if (IFNM) then
          sx = 1.0
          sy = 1.0
	  sz = 1.0
          nmscale = 1.0               ! nanoscale                                                  
          dt      = dt*10.0**(-18)                    
       else
          sx = 1.0/(xmax-xmin)
          sy = 1.0/(ymax-ymin)       
          if (if3d) sz = 1.0/(zmax-zmin)            
          nmscale = 1.0/(xmax-xmin)   ! nanoscale                                                  
          dt      = dt                                
      endif 

      if (if3d) then

      do i=1,n
         xm1(i,1,1,1) = sx*xm1(i,1,1,1)                
         ym1(i,1,1,1) = sy*ym1(i,1,1,1)                        
         zm1(i,1,1,1) = sz*zm1(i,1,1,1)
      enddo

      else

      do i=1,n
         xm1(i,1,1,1) = sx*xm1(i,1,1,1)               
         ym1(i,1,1,1) = sy*ym1(i,1,1,1)                        
      enddo
      endif

      return
      end


c-----------------------------------------------------------------------
      subroutine userft           
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk(docleanup)
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      logical docleanup

      common /ccpu/ cpu_t,cpu_t0
      COMMON /ERR /  ErrHX(LX1,LY1,LZ1,LELT)
     $             , ErrHY(LX1,LY1,LZ1,LELT)
     $             , ErrHZ(LX1,LY1,LZ1,LELT)
     $             , ErrEX(LX1,LY1,LZ1,LELT)
     $             , ErrEY(LX1,LY1,LZ1,LELT)
     $             , ErrEZ(LX1,LY1,LZ1,LELT)
      
      integer errunit
      parameter (errunit=77)

c     Helper for initialize-once variables
      logical icalld
      data icalld/.false./
      save icalld

      if ((.not.icalld).and.(nid.eq.0)) then
        icalld = .true.

        open (errunit,file='runlog.dat',status='new')
        write(errunit,*) 'NEKTON run log'
      endif

      if (docleanup) then
        close(errunit)
        return
      endif

c ... compute errors

      if (istep.le.10.or.mod(istep,iocomm).eq.0) then

        ntott = nx1*ny1*nz1*nelt
        nsrf  = nx1*nz1*nelt*6

        if (ifsol) then
          call usersol(time,shx,shy,shz,sex,sey,sez)
        else
          call rzero(shx, ntott) 
          call rzero(shy, ntott) 
          call rzero(shz, ntott) 
          call rzero(sex, ntott) 
          call rzero(sey, ntott) 
          call rzero(sez, ntott) 
        endif

        call sub3(ErrHX,SHX,HX,NTOTT) 
        call sub3(ErrHY,SHY,HY,NTOTT) 
        call sub3(ErrHZ,SHZ,HZ,NTOTT) 
        call sub3(ErrEX,SEX,EX,NTOTT) 
        call sub3(ErrEY,SEY,EY,NTOTT) 
        call sub3(ErrEZ,SEZ,EZ,NTOTT) 

        HXmr = glamax(ErrHX,NTOTT) 
        HYmr = glamax(ErrHY,NTOTT) 
        HZmr = glamax(ErrHZ,NTOTT) 
        EXmr = glamax(ErrEX,NTOTT) 
        EYmr = glamax(ErrEY,NTOTT) 
        EZmr = glamax(ErrEZ,NTOTT) 

        HXer = glsc3(ErrHX,bm1,ErrHX,NTOTT) / volvm1
        HYer = glsc3(ErrHY,bm1,ErrHY,NTOTT) / volvm1
        HZer = glsc3(ErrHZ,bm1,ErrHZ,NTOTT) / volvm1
        EXer = glsc3(ErrEX,bm1,ErrEX,NTOTT) / volvm1
        EYer = glsc3(ErrEY,bm1,ErrEY,NTOTT) / volvm1
        EZer = glsc3(ErrEZ,bm1,ErrEZ,NTOTT) / volvm1

        if (hxer.gt.0) hxer = sqrt(hxer)
        if (hyer.gt.0) hyer = sqrt(hyer)
        if (hzer.gt.0) hzer = sqrt(hzer)
        if (exer.gt.0) exer = sqrt(exer)
        if (eyer.gt.0) eyer = sqrt(eyer)
        if (ezer.gt.0) ezer = sqrt(ezer)


c ... compute max gap size at interfaces between elmts.

        HXgp = glamax(gHX,NSRF) 
        HYgp = glamax(gHY,NSRF) 
        HZgp = glamax(gHZ,NSRF) 
        EXgp = glamax(gEX,NSRF) 
        EYgp = glamax(gEY,NSRF) 
        EZgp = glamax(gEZ,NSRF) 

c ... print statement

        snel = nelt + .5
        snel = sqrt(snel)
        nels = snel
        nnn  = nx1-1
        npt1 = nnn*nels
        npts = nx1*ny1*nz1*nelt ! npts = npt1**ndim
        wavelength = param(69)*nmscale

	if (wavelength.ne.0) then
            tpw  = time/wavelength
        else
            tpw  = 0.0                 
        endif 

        if (nid.eq.0) then

          h2err = hxer**2 + hyer**2
          if (h2err.gt.0) h2err = sqrt(h2err)
          hmgp = max(hxgp,hygp)
          hmer = max(hxmr,hymr)

          write(6,91) ISTEP,nelt,nels,nnn,npt1,npts
     $               ,time,dt,HXer,HYer,HZer,EXer,EYer,EZer,cpu_t,tpw
          write(6,95) ISTEP,nelt,nels,nnn,npt1,npts
     $               ,time,dt,HXmr,HYmr,HZmr,EXmr,EYmr,EZmr,cpu_t,tpw

 91       format(/,i5,3i5,i5,i9,1p9e10.3,e9.2,' CPU: L2  ')
 95       format(/,i5,3i5,i5,i9,1p9e10.3,e9.2,' CPU: Linf')

          ! write errors to file
          write(errunit,61) 'L2',istep,HXer,HYer,HZer,EXer,EYer,EZer
          write(errunit,61) 'Linf', istep,HXmr,HYmr,HZmr,EXmr,EYmr,EZmr
          write(errunit,62) istep,cpu_t

 61       format('errors ',A,i9,' hx:',e20.9,' hy:',e20.9,' hz:',e20.9,
     $                          ' ex:',e20.9,' ey:',e20.9,' ez:',e20.9)
 62       format('time ',i5,e20.9)

          write(18,93) ISTEP,EZer
 93       format(i7,1pe10.3)

        endif ! nid=0

      endif


      return
      end





